"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[1504],{1504:(e,r,i)=>{i.r(r),i.d(r,{ITextResourceConfigurationService:()=>n,ITextResourcePropertiesService:()=>c});var t=i(2399);const n=(0,t.u1)("textResourceConfigurationService"),c=(0,t.u1)("textResourcePropertiesService")},2399:(e,r,i)=>{var t;i.d(r,{_$:()=>t,_Y:()=>n,u1:()=>c}),function(e){e.serviceIds=new Map,e.DI_TARGET="$di$target",e.DI_DEPENDENCIES="$di$dependencies",e.getServiceDependencies=function(r){return r[e.DI_DEPENDENCIES]||[]}}(t||(t={}));const n=c("instantiationService");function c(e){if(t.serviceIds.has(e))return t.serviceIds.get(e);const r=function(e,i,n){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");!function(e,r,i){r[t.DI_TARGET]===r?r[t.DI_DEPENDENCIES].push({id:e,index:i}):(r[t.DI_DEPENDENCIES]=[{id:e,index:i}],r[t.DI_TARGET]=r)}(r,e,n)};return r.toString=()=>e,t.serviceIds.set(e,r),r}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwNC5idW5kbGUuanMiLCJtYXBwaW5ncyI6InFPQUNPLE1BQU1BLEdBQW9DLFFBQWdCLG9DQUNwREMsR0FBaUMsUUFBZ0IsZ0MsaUJDR3ZELElBQUlDLEUsb0NBQ1gsU0FBV0EsR0FDUEEsRUFBTUMsV0FBYSxJQUFJQyxJQUN2QkYsRUFBTUcsVUFBWSxhQUNsQkgsRUFBTUksZ0JBQWtCLG1CQUl4QkosRUFBTUssdUJBSE4sU0FBZ0NDLEdBQzVCLE9BQU9BLEVBQUtOLEVBQU1JLGtCQUFvQixFQUMxQyxDQUVILENBUkQsQ0FRR0osSUFBVUEsRUFBUSxDQUFDLElBQ2YsTUFBTU8sRUFBd0JDLEVBQWdCLHdCQWE5QyxTQUFTQSxFQUFnQkMsR0FDNUIsR0FBSVQsRUFBTUMsV0FBV1MsSUFBSUQsR0FDckIsT0FBT1QsRUFBTUMsV0FBV1UsSUFBSUYsR0FFaEMsTUFBTUcsRUFBSyxTQUFVQyxFQUFRQyxFQUFLQyxHQUM5QixHQUF5QixJQUFyQkMsVUFBVUMsT0FDVixNQUFNLElBQUlDLE1BQU0scUVBbEI1QixTQUFnQ04sRUFBSUMsRUFBUUUsR0FDcENGLEVBQU9iLEVBQU1HLGFBQWVVLEVBQzVCQSxFQUFPYixFQUFNSSxpQkFBaUJlLEtBQUssQ0FBRVAsS0FBSUcsV0FHekNGLEVBQU9iLEVBQU1JLGlCQUFtQixDQUFDLENBQUVRLEtBQUlHLFVBQ3ZDRixFQUFPYixFQUFNRyxXQUFhVSxFQUVsQyxDQVlRTyxDQUF1QlIsRUFBSUMsRUFBUUUsRUFDdkMsRUFHQSxPQUZBSCxFQUFHUyxTQUFXLElBQU1aLEVBQ3BCVCxFQUFNQyxXQUFXcUIsSUFBSWIsRUFBV0csR0FDekJBLENBQ1gsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3B5bGluYWMteWFtbC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvZWRpdG9yL2NvbW1vbi9zZXJ2aWNlcy90ZXh0UmVzb3VyY2VDb25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL3B5bGluYWMteWFtbC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvcGxhdGZvcm0vaW5zdGFudGlhdGlvbi9jb21tb24vaW5zdGFudGlhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVEZWNvcmF0b3IgfSBmcm9tICcuLi8uLi8uLi9wbGF0Zm9ybS9pbnN0YW50aWF0aW9uL2NvbW1vbi9pbnN0YW50aWF0aW9uLmpzJztcbmV4cG9ydCBjb25zdCBJVGV4dFJlc291cmNlQ29uZmlndXJhdGlvblNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3IoJ3RleHRSZXNvdXJjZUNvbmZpZ3VyYXRpb25TZXJ2aWNlJyk7XG5leHBvcnQgY29uc3QgSVRleHRSZXNvdXJjZVByb3BlcnRpZXNTZXJ2aWNlID0gY3JlYXRlRGVjb3JhdG9yKCd0ZXh0UmVzb3VyY2VQcm9wZXJ0aWVzU2VydmljZScpO1xuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4vLyAtLS0tLS0gaW50ZXJuYWwgdXRpbFxuZXhwb3J0IHZhciBfdXRpbDtcbihmdW5jdGlvbiAoX3V0aWwpIHtcbiAgICBfdXRpbC5zZXJ2aWNlSWRzID0gbmV3IE1hcCgpO1xuICAgIF91dGlsLkRJX1RBUkdFVCA9ICckZGkkdGFyZ2V0JztcbiAgICBfdXRpbC5ESV9ERVBFTkRFTkNJRVMgPSAnJGRpJGRlcGVuZGVuY2llcyc7XG4gICAgZnVuY3Rpb24gZ2V0U2VydmljZURlcGVuZGVuY2llcyhjdG9yKSB7XG4gICAgICAgIHJldHVybiBjdG9yW191dGlsLkRJX0RFUEVOREVOQ0lFU10gfHwgW107XG4gICAgfVxuICAgIF91dGlsLmdldFNlcnZpY2VEZXBlbmRlbmNpZXMgPSBnZXRTZXJ2aWNlRGVwZW5kZW5jaWVzO1xufSkoX3V0aWwgfHwgKF91dGlsID0ge30pKTtcbmV4cG9ydCBjb25zdCBJSW5zdGFudGlhdGlvblNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3IoJ2luc3RhbnRpYXRpb25TZXJ2aWNlJyk7XG5mdW5jdGlvbiBzdG9yZVNlcnZpY2VEZXBlbmRlbmN5KGlkLCB0YXJnZXQsIGluZGV4KSB7XG4gICAgaWYgKHRhcmdldFtfdXRpbC5ESV9UQVJHRVRdID09PSB0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0W191dGlsLkRJX0RFUEVOREVOQ0lFU10ucHVzaCh7IGlkLCBpbmRleCB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhcmdldFtfdXRpbC5ESV9ERVBFTkRFTkNJRVNdID0gW3sgaWQsIGluZGV4IH1dO1xuICAgICAgICB0YXJnZXRbX3V0aWwuRElfVEFSR0VUXSA9IHRhcmdldDtcbiAgICB9XG59XG4vKipcbiAqIFRoZSAqb25seSogdmFsaWQgd2F5IHRvIGNyZWF0ZSBhIHt7U2VydmljZUlkZW50aWZpZXJ9fS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlY29yYXRvcihzZXJ2aWNlSWQpIHtcbiAgICBpZiAoX3V0aWwuc2VydmljZUlkcy5oYXMoc2VydmljZUlkKSkge1xuICAgICAgICByZXR1cm4gX3V0aWwuc2VydmljZUlkcy5nZXQoc2VydmljZUlkKTtcbiAgICB9XG4gICAgY29uc3QgaWQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXksIGluZGV4KSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0BJU2VydmljZU5hbWUtZGVjb3JhdG9yIGNhbiBvbmx5IGJlIHVzZWQgdG8gZGVjb3JhdGUgYSBwYXJhbWV0ZXInKTtcbiAgICAgICAgfVxuICAgICAgICBzdG9yZVNlcnZpY2VEZXBlbmRlbmN5KGlkLCB0YXJnZXQsIGluZGV4KTtcbiAgICB9O1xuICAgIGlkLnRvU3RyaW5nID0gKCkgPT4gc2VydmljZUlkO1xuICAgIF91dGlsLnNlcnZpY2VJZHMuc2V0KHNlcnZpY2VJZCwgaWQpO1xuICAgIHJldHVybiBpZDtcbn1cbiJdLCJuYW1lcyI6WyJJVGV4dFJlc291cmNlQ29uZmlndXJhdGlvblNlcnZpY2UiLCJJVGV4dFJlc291cmNlUHJvcGVydGllc1NlcnZpY2UiLCJfdXRpbCIsInNlcnZpY2VJZHMiLCJNYXAiLCJESV9UQVJHRVQiLCJESV9ERVBFTkRFTkNJRVMiLCJnZXRTZXJ2aWNlRGVwZW5kZW5jaWVzIiwiY3RvciIsIklJbnN0YW50aWF0aW9uU2VydmljZSIsImNyZWF0ZURlY29yYXRvciIsInNlcnZpY2VJZCIsImhhcyIsImdldCIsImlkIiwidGFyZ2V0Iiwia2V5IiwiaW5kZXgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJFcnJvciIsInB1c2giLCJzdG9yZVNlcnZpY2VEZXBlbmRlbmN5IiwidG9TdHJpbmciLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9