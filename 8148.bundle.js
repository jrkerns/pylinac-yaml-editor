"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[8148,9044,2891],{2891:(e,t,n)=>{n.r(t),n.d(t,{ISemanticTokensStylingService:()=>i});const i=(0,n(2399).u1)("semanticTokensStylingService")},8148:(e,t,n)=>{n.r(t),n.d(t,{SemanticTokensStylingService:()=>d});var i=n(998),r=n(7922),s=n(9044),c=n(6441),a=n(9520),h=n(2891),o=n(6726),u=function(e,t){return function(n,i){t(n,i,e)}};let d=class extends i.jG{constructor(e,t,n){super(),this._themeService=e,this._logService=t,this._languageService=n,this._caches=new WeakMap,this._register(this._themeService.onDidColorThemeChange((()=>{this._caches=new WeakMap})))}getStyling(e){return this._caches.has(e)||this._caches.set(e,new a.SemanticTokensProviderStyling(e.getLegend(),this._themeService,this._languageService,this._logService)),this._caches.get(e)}};d=function(e,t,n,i){var r,s=arguments.length,c=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,n,i);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(c=(s<3?r(c):s>3?r(t,n,c):r(t,n))||c);return s>3&&c&&Object.defineProperty(t,n,c),c}([u(0,s.Gy),u(1,c.rr),u(2,r.L)],d),(0,o.v)(h.ISemanticTokensStylingService,d,1)},3312:(e,t,n)=>{n.d(t,{d:()=>i});class i{constructor(e,t=[],n=!1){this.ctor=e,this.staticArguments=t,this.supportsDelayedInstantiation=n}}},6726:(e,t,n)=>{n.d(t,{N:()=>c,v:()=>s});var i=n(3312);const r=[];function s(e,t,n){t instanceof i.d||(t=new i.d(t,[],Boolean(n))),r.push([e,t])}function c(){return r}},2399:(e,t,n)=>{var i;n.d(t,{_$:()=>i,_Y:()=>r,u1:()=>s}),function(e){e.serviceIds=new Map,e.DI_TARGET="$di$target",e.DI_DEPENDENCIES="$di$dependencies",e.getServiceDependencies=function(t){return t[e.DI_DEPENDENCIES]||[]}}(i||(i={}));const r=s("instantiationService");function s(e){if(i.serviceIds.has(e))return i.serviceIds.get(e);const t=function(e,n,r){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");!function(e,t,n){t[i.DI_TARGET]===t?t[i.DI_DEPENDENCIES].push({id:e,index:n}):(t[i.DI_DEPENDENCIES]=[{id:e,index:n}],t[i.DI_TARGET]=t)}(t,e,r)};return t.toString=()=>e,i.serviceIds.set(e,t),t}},7167:(e,t,n)=>{n.d(t,{O:()=>s});var i=n(7110),r=n(9359);const s=new class{constructor(){this.data=new Map}add(e,t){i.ok(r.Kg(e)),i.ok(r.Gv(t)),i.ok(!this.data.has(e),"There is already an extension with this id"),this.data.set(e,t)}as(e){return this.data.get(e)||null}}},9563:(e,t,n)=>{var i;function r(e){return e===i.HIGH_CONTRAST_DARK||e===i.HIGH_CONTRAST_LIGHT}function s(e){return e===i.DARK||e===i.HIGH_CONTRAST_DARK}n.d(t,{Bb:()=>r,HD:()=>s,zM:()=>i}),function(e){e.DARK="dark",e.LIGHT="light",e.HIGH_CONTRAST_DARK="hcDark",e.HIGH_CONTRAST_LIGHT="hcLight"}(i||(i={}))},9044:(e,t,n)=>{n.d(t,{Fd:()=>d,Gy:()=>h,Pz:()=>u,Yf:()=>o,lR:()=>T,zy:()=>l});var i=n(2106),r=n(998),s=n(2399),c=n(7167),a=n(9563);const h=(0,s.u1)("themeService");function o(e){return{id:e}}function u(e){switch(e){case a.zM.DARK:return"vs-dark";case a.zM.HIGH_CONTRAST_DARK:return"hc-black";case a.zM.HIGH_CONTRAST_LIGHT:return"hc-light";default:return"vs"}}const d={ThemingContribution:"base.contributions.theming"},g=new class{constructor(){this.themingParticipants=[],this.themingParticipants=[],this.onThemingParticipantAddedEmitter=new i.vl}onColorThemeChange(e){return this.themingParticipants.push(e),this.onThemingParticipantAddedEmitter.fire(e),(0,r.s)((()=>{const t=this.themingParticipants.indexOf(e);this.themingParticipants.splice(t,1)}))}getThemingParticipants(){return this.themingParticipants}};function l(e){return g.onColorThemeChange(e)}c.O.add(d.ThemingContribution,g);class T extends r.jG{constructor(e){super(),this.themeService=e,this.theme=e.getColorTheme(),this._register(this.themeService.onDidColorThemeChange((e=>this.onThemeChange(e))))}onThemeChange(e){this.theme=e,this.updateStyles()}updateStyles(){}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,