"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[4482,4830],{8436:(e,r,n)=>{function t(e,r){const n=[],t=[];for(const t of e)r.has(t)||n.push(t);for(const n of r)e.has(n)||t.push(n);return{removed:n,added:t}}function i(e,r){const n=new Set;for(const t of r)e.has(t)&&n.add(t);return n}n.d(r,{E:()=>i,Z:()=>t})},6459:(e,r,n)=>{n.d(r,{A:()=>o});var t,i=n(6844);!function(e){e[e.Ignore=0]="Ignore",e[e.Info=1]="Info",e[e.Warning=2]="Warning",e[e.Error=3]="Error"}(t||(t={})),function(e){const r="error",n="warning",t="info";e.fromValue=function(o){return o?i.Q_(r,o)?e.Error:i.Q_(n,o)||i.Q_("warn",o)?e.Warning:i.Q_(t,o)?e.Info:e.Ignore:e.Ignore},e.toString=function(i){switch(i){case e.Error:return r;case e.Warning:return n;case e.Info:return t;default:return"ignore"}}}(t||(t={}));const o=t},11:(e,r,n)=>{n.r(r),n.d(r,{MarkerDecorationsService:()=>p});var t=n(0),i=n(998),o=n(6055),s=n(9044),a=n(8295),c=n(4830),u=n(8061),d=n(3072),h=n(2106),l=n(559),g=n(7992),m=n(8436),f=function(e,r){return function(n,t){r(n,t,e)}};let p=class extends i.jG{constructor(e,r){super(),this._markerService=r,this._onDidChangeMarker=this._register(new h.vl),this._markerDecorations=new g.fT,e.getModels().forEach((e=>this._onModelAdded(e))),this._register(e.onModelAdded(this._onModelAdded,this)),this._register(e.onModelRemoved(this._onModelRemoved,this)),this._register(this._markerService.onMarkerChanged(this._handleMarkerChange,this))}dispose(){super.dispose(),this._markerDecorations.forEach((e=>e.dispose())),this._markerDecorations.clear()}getMarker(e,r){const n=this._markerDecorations.get(e);return n&&n.getMarker(r)||null}_handleMarkerChange(e){e.forEach((e=>{const r=this._markerDecorations.get(e);r&&this._updateDecorations(r)}))}_onModelAdded(e){const r=new _(e);this._markerDecorations.set(e.uri,r),this._updateDecorations(r)}_onModelRemoved(e){const r=this._markerDecorations.get(e.uri);r&&(r.dispose(),this._markerDecorations.delete(e.uri)),e.uri.scheme!==d.ny.inMemory&&e.uri.scheme!==d.ny.internal&&e.uri.scheme!==d.ny.vscode||this._markerService?.read({resource:e.uri}).map((e=>e.owner)).forEach((r=>this._markerService.remove(r,[e.uri])))}_updateDecorations(e){const r=this._markerService.read({resource:e.model.uri,take:500});e.update(r)&&this._onDidChangeMarker.fire(e.model)}};p=function(e,r,n,t){var i,o=arguments.length,s=o<3?r:null===t?t=Object.getOwnPropertyDescriptor(r,n):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,r,n,t);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(r,n,s):i(r,n))||s);return o>3&&s&&Object.defineProperty(r,n,s),s}([f(0,c.IModelService),f(1,t.DR)],p);class _ extends i.jG{constructor(e){super(),this.model=e,this._map=new g.cO,this._register((0,i.s)((()=>{this.model.deltaDecorations([...this._map.values()],[]),this._map.clear()})))}update(e){const{added:r,removed:n}=(0,m.Z)(new Set(this._map.keys()),new Set(e));if(0===r.length&&0===n.length)return!1;const t=n.map((e=>this._map.get(e))),i=r.map((e=>({range:this._createDecorationRange(this.model,e),options:this._createDecorationOption(e)}))),o=this.model.deltaDecorations(t,i);for(const e of n)this._map.delete(e);for(let e=0;e<o.length;e++)this._map.set(r[e],o[e]);return!0}getMarker(e){return this._map.getKey(e.id)}_createDecorationRange(e,r){let n=u.Q.lift(r);if(r.severity!==t.cj.Hint||this._hasMarkerTag(r,1)||this._hasMarkerTag(r,2)||(n=n.setEndPosition(n.startLineNumber,n.startColumn+2)),n=e.validateRange(n),n.isEmpty()){const r=e.getLineLastNonWhitespaceColumn(n.startLineNumber)||e.getLineMaxColumn(n.startLineNumber);if(1===r||n.endColumn>=r)return n;const t=e.getWordAtPosition(n.getStartPosition());t&&(n=new u.Q(n.startLineNumber,t.startColumn,n.endLineNumber,t.endColumn))}else if(r.endColumn===Number.MAX_VALUE&&1===r.startColumn&&n.startLineNumber===n.endLineNumber){const t=e.getLineFirstNonWhitespaceColumn(r.startLineNumber);t<n.endColumn&&(n=new u.Q(n.startLineNumber,t,n.endLineNumber,n.endColumn),r.startColumn=t)}return n}_createDecorationOption(e){let r,n,i,c,u;switch(e.severity){case t.cj.Hint:r=this._hasMarkerTag(e,2)?void 0:this._hasMarkerTag(e,1)?"squiggly-unnecessary":"squiggly-hint",i=0;break;case t.cj.Info:r="squiggly-info",n=(0,s.Yf)(a.AQ),i=10,u={color:(0,s.Yf)(l.KoI),position:1};break;case t.cj.Warning:r="squiggly-warning",n=(0,s.Yf)(a.aZ),i=20,u={color:(0,s.Yf)(l.uMG),position:1};break;case t.cj.Error:default:r="squiggly-error",n=(0,s.Yf)(a.yI),i=30,u={color:(0,s.Yf)(l.yLC),position:1}}return e.tags&&(-1!==e.tags.indexOf(1)&&(c="squiggly-inline-unnecessary"),-1!==e.tags.indexOf(2)&&(c="squiggly-inline-deprecated")),{description:"marker-decoration",stickiness:1,className:r,showIfCollapsed:!0,overviewRuler:{color:n,position:o.A5.Right},minimap:u,zIndex:i,inlineClassName:c}}_hasMarkerTag(e,r){return!!e.tags&&e.tags.indexOf(r)>=0}}},4830:(e,r,n)=>{n.r(r),n.d(r,{IModelService:()=>t});const t=(0,n(2399).u1)("modelService")},2399:(e,r,n)=>{var t;n.d(r,{_$:()=>t,_Y:()=>i,u1:()=>o}),function(e){e.serviceIds=new Map,e.DI_TARGET="$di$target",e.DI_DEPENDENCIES="$di$dependencies",e.getServiceDependencies=function(r){return r[e.DI_DEPENDENCIES]||[]}}(t||(t={}));const i=o("instantiationService");function o(e){if(t.serviceIds.has(e))return t.serviceIds.get(e);const r=function(e,n,i){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");!function(e,r,n){r[t.DI_TARGET]===r?r[t.DI_DEPENDENCIES].push({id:e,index:n}):(r[t.DI_DEPENDENCIES]=[{id:e,index:n}],r[t.DI_TARGET]=r)}(r,e,i)};return r.toString=()=>e,t.serviceIds.set(e,r),r}},1460:(e,r,n)=>{n.d(r,{F:()=>o});var t=n(2106),i=n(7167);const o={JSONContribution:"base.contributions.json"},s=new class{constructor(){this._onDidChangeSchema=new t.vl,this.schemasById={}}registerSchema(e,r){var n;this.schemasById[(n=e,n.length>0&&"#"===n.charAt(n.length-1)?n.substring(0,n.length-1):n)]=r,this._onDidChangeSchema.fire(e)}notifySchemaChanged(e){this._onDidChangeSchema.fire(e)}};i.O.add(o.JSONContribution,s)},0:(e,r,n)=>{n.d(r,{DR:()=>c,cj:()=>t,oc:()=>i});var t,i,o=n(6459),s=n(9746),a=n(2399);!function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(t||(t={})),function(e){e.compare=function(e,r){return r-e};const r=Object.create(null);r[e.Error]=(0,s.kg)("sev.error","Error"),r[e.Warning]=(0,s.kg)("sev.warning","Warning"),r[e.Info]=(0,s.kg)("sev.info","Info"),e.toString=function(e){return r[e]||""},e.fromSeverity=function(r){switch(r){case o.A.Error:return e.Error;case o.A.Warning:return e.Warning;case o.A.Info:return e.Info;case o.A.Ignore:return e.Hint}},e.toSeverity=function(r){switch(r){case e.Error:return o.A.Error;case e.Warning:return o.A.Warning;case e.Info:return o.A.Info;case e.Hint:return o.A.Ignore}}}(t||(t={})),function(e){const r="";function n(e,n){const i=[r];return e.source?i.push(e.source.replace("¦","\\¦")):i.push(r),e.code?"string"==typeof e.code?i.push(e.code.replace("¦","\\¦")):i.push(e.code.value.replace("¦","\\¦")):i.push(r),void 0!==e.severity&&null!==e.severity?i.push(t.toString(e.severity)):i.push(r),e.message&&n?i.push(e.message.replace("¦","\\¦")):i.push(r),void 0!==e.startLineNumber&&null!==e.startLineNumber?i.push(e.startLineNumber.toString()):i.push(r),void 0!==e.startColumn&&null!==e.startColumn?i.push(e.startColumn.toString()):i.push(r),void 0!==e.endLineNumber&&null!==e.endLineNumber?i.push(e.endLineNumber.toString()):i.push(r),void 0!==e.endColumn&&null!==e.endColumn?i.push(e.endColumn.toString()):i.push(r),i.push(r),i.join("¦")}e.makeKey=function(e){return n(e,!0)},e.makeKeyOptionalMessage=n}(i||(i={}));const c=(0,a.u1)("markerService")},7167:(e,r,n)=>{n.d(r,{O:()=>o});var t=n(7110),i=n(9359);const o=new class{constructor(){this.data=new Map}add(e,r){t.ok(i.Kg(e)),t.ok(i.Gv(r)),t.ok(!this.data.has(e),"There is already an extension with this id"),this.data.set(e,r)}as(e){return this.data.get(e)||null}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,