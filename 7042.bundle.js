"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[7042],{7042:(e,n,t)=>{t.r(n),t.d(n,{ITextModelService:()=>i});const i=(0,t(2399).u1)("textModelService")},2399:(e,n,t)=>{var i;t.d(n,{_$:()=>i,_Y:()=>r,u1:()=>c}),function(e){e.serviceIds=new Map,e.DI_TARGET="$di$target",e.DI_DEPENDENCIES="$di$dependencies",e.getServiceDependencies=function(n){return n[e.DI_DEPENDENCIES]||[]}}(i||(i={}));const r=c("instantiationService");function c(e){if(i.serviceIds.has(e))return i.serviceIds.get(e);const n=function(e,t,r){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");!function(e,n,t){n[i.DI_TARGET]===n?n[i.DI_DEPENDENCIES].push({id:e,index:t}):(n[i.DI_DEPENDENCIES]=[{id:e,index:t}],n[i.DI_TARGET]=n)}(n,e,r)};return n.toString=()=>e,i.serviceIds.set(e,n),n}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzA0Mi5idW5kbGUuanMiLCJtYXBwaW5ncyI6ImtLQUNPLE1BQU1BLEdBQW9CLEUsUUFBQSxJQUFnQixtQixpQkNJMUMsSUFBSUMsRSxvQ0FDWCxTQUFXQSxHQUNQQSxFQUFNQyxXQUFhLElBQUlDLElBQ3ZCRixFQUFNRyxVQUFZLGFBQ2xCSCxFQUFNSSxnQkFBa0IsbUJBSXhCSixFQUFNSyx1QkFITixTQUFnQ0MsR0FDNUIsT0FBT0EsRUFBS04sRUFBTUksa0JBQW9CLEVBQzFDLENBRUgsQ0FSRCxDQVFHSixJQUFVQSxFQUFRLENBQUMsSUFDZixNQUFNTyxFQUF3QkMsRUFBZ0Isd0JBYTlDLFNBQVNBLEVBQWdCQyxHQUM1QixHQUFJVCxFQUFNQyxXQUFXUyxJQUFJRCxHQUNyQixPQUFPVCxFQUFNQyxXQUFXVSxJQUFJRixHQUVoQyxNQUFNRyxFQUFLLFNBQVVDLEVBQVFDLEVBQUtDLEdBQzlCLEdBQXlCLElBQXJCQyxVQUFVQyxPQUNWLE1BQU0sSUFBSUMsTUFBTSxxRUFsQjVCLFNBQWdDTixFQUFJQyxFQUFRRSxHQUNwQ0YsRUFBT2IsRUFBTUcsYUFBZVUsRUFDNUJBLEVBQU9iLEVBQU1JLGlCQUFpQmUsS0FBSyxDQUFFUCxLQUFJRyxXQUd6Q0YsRUFBT2IsRUFBTUksaUJBQW1CLENBQUMsQ0FBRVEsS0FBSUcsVUFDdkNGLEVBQU9iLEVBQU1HLFdBQWFVLEVBRWxDLENBWVFPLENBQXVCUixFQUFJQyxFQUFRRSxFQUN2QyxFQUdBLE9BRkFILEVBQUdTLFNBQVcsSUFBTVosRUFDcEJULEVBQU1DLFdBQVdxQixJQUFJYixFQUFXRyxHQUN6QkEsQ0FDWCxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHlsaW5hYy15YW1sLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9lZGl0b3IvY29tbW9uL3NlcnZpY2VzL3Jlc29sdmVyU2VydmljZS5qcyIsIndlYnBhY2s6Ly9weWxpbmFjLXlhbWwtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL3BsYXRmb3JtL2luc3RhbnRpYXRpb24vY29tbW9uL2luc3RhbnRpYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlRGVjb3JhdG9yIH0gZnJvbSAnLi4vLi4vLi4vcGxhdGZvcm0vaW5zdGFudGlhdGlvbi9jb21tb24vaW5zdGFudGlhdGlvbi5qcyc7XG5leHBvcnQgY29uc3QgSVRleHRNb2RlbFNlcnZpY2UgPSBjcmVhdGVEZWNvcmF0b3IoJ3RleHRNb2RlbFNlcnZpY2UnKTtcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gLS0tLS0tIGludGVybmFsIHV0aWxcbmV4cG9ydCB2YXIgX3V0aWw7XG4oZnVuY3Rpb24gKF91dGlsKSB7XG4gICAgX3V0aWwuc2VydmljZUlkcyA9IG5ldyBNYXAoKTtcbiAgICBfdXRpbC5ESV9UQVJHRVQgPSAnJGRpJHRhcmdldCc7XG4gICAgX3V0aWwuRElfREVQRU5ERU5DSUVTID0gJyRkaSRkZXBlbmRlbmNpZXMnO1xuICAgIGZ1bmN0aW9uIGdldFNlcnZpY2VEZXBlbmRlbmNpZXMoY3Rvcikge1xuICAgICAgICByZXR1cm4gY3RvcltfdXRpbC5ESV9ERVBFTkRFTkNJRVNdIHx8IFtdO1xuICAgIH1cbiAgICBfdXRpbC5nZXRTZXJ2aWNlRGVwZW5kZW5jaWVzID0gZ2V0U2VydmljZURlcGVuZGVuY2llcztcbn0pKF91dGlsIHx8IChfdXRpbCA9IHt9KSk7XG5leHBvcnQgY29uc3QgSUluc3RhbnRpYXRpb25TZXJ2aWNlID0gY3JlYXRlRGVjb3JhdG9yKCdpbnN0YW50aWF0aW9uU2VydmljZScpO1xuZnVuY3Rpb24gc3RvcmVTZXJ2aWNlRGVwZW5kZW5jeShpZCwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGlmICh0YXJnZXRbX3V0aWwuRElfVEFSR0VUXSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldFtfdXRpbC5ESV9ERVBFTkRFTkNJRVNdLnB1c2goeyBpZCwgaW5kZXggfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0YXJnZXRbX3V0aWwuRElfREVQRU5ERU5DSUVTXSA9IFt7IGlkLCBpbmRleCB9XTtcbiAgICAgICAgdGFyZ2V0W191dGlsLkRJX1RBUkdFVF0gPSB0YXJnZXQ7XG4gICAgfVxufVxuLyoqXG4gKiBUaGUgKm9ubHkqIHZhbGlkIHdheSB0byBjcmVhdGUgYSB7e1NlcnZpY2VJZGVudGlmaWVyfX0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWNvcmF0b3Ioc2VydmljZUlkKSB7XG4gICAgaWYgKF91dGlsLnNlcnZpY2VJZHMuaGFzKHNlcnZpY2VJZCkpIHtcbiAgICAgICAgcmV0dXJuIF91dGlsLnNlcnZpY2VJZHMuZ2V0KHNlcnZpY2VJZCk7XG4gICAgfVxuICAgIGNvbnN0IGlkID0gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBpbmRleCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdASVNlcnZpY2VOYW1lLWRlY29yYXRvciBjYW4gb25seSBiZSB1c2VkIHRvIGRlY29yYXRlIGEgcGFyYW1ldGVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RvcmVTZXJ2aWNlRGVwZW5kZW5jeShpZCwgdGFyZ2V0LCBpbmRleCk7XG4gICAgfTtcbiAgICBpZC50b1N0cmluZyA9ICgpID0+IHNlcnZpY2VJZDtcbiAgICBfdXRpbC5zZXJ2aWNlSWRzLnNldChzZXJ2aWNlSWQsIGlkKTtcbiAgICByZXR1cm4gaWQ7XG59XG4iXSwibmFtZXMiOlsiSVRleHRNb2RlbFNlcnZpY2UiLCJfdXRpbCIsInNlcnZpY2VJZHMiLCJNYXAiLCJESV9UQVJHRVQiLCJESV9ERVBFTkRFTkNJRVMiLCJnZXRTZXJ2aWNlRGVwZW5kZW5jaWVzIiwiY3RvciIsIklJbnN0YW50aWF0aW9uU2VydmljZSIsImNyZWF0ZURlY29yYXRvciIsInNlcnZpY2VJZCIsImhhcyIsImdldCIsImlkIiwidGFyZ2V0Iiwia2V5IiwiaW5kZXgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJFcnJvciIsInB1c2giLCJzdG9yZVNlcnZpY2VEZXBlbmRlbmN5IiwidG9TdHJpbmciLCJzZXQiXSwic291cmNlUm9vdCI6IiJ9