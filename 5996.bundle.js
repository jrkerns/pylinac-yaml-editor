"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[5996],{5996:(e,n,t)=>{t.r(n),t.d(n,{clearPlatformLanguageAssociations:()=>w,getLanguageIds:()=>d,registerPlatformLanguageAssociation:()=>p});var i=t(3958),o=t(3720),r=t(3072),a=t(8019),s=t(2467),f=t(6844),l=t(4957);let m=[],u=[],c=[];function p(e,n=!1){!function(e,n,t){const o=function(e){return{id:e.id,mime:e.mime,filename:e.filename,extension:e.extension,filepattern:e.filepattern,firstline:e.firstline,userConfigured:false,filenameLowercase:e.filename?e.filename.toLowerCase():void 0,extensionLowercase:e.extension?e.extension.toLowerCase():void 0,filepatternLowercase:e.filepattern?(0,i.qg)(e.filepattern.toLowerCase()):void 0,filepatternOnPath:!!e.filepattern&&e.filepattern.indexOf(a.SA.sep)>=0}}(e);m.push(o),o.userConfigured?c.push(o):u.push(o),t&&!o.userConfigured&&m.forEach((e=>{e.mime===o.mime||e.userConfigured||(o.extension&&e.extension===o.extension&&console.warn(`Overwriting extension <<${o.extension}>> to now point to mime <<${o.mime}>>`),o.filename&&e.filename===o.filename&&console.warn(`Overwriting filename <<${o.filename}>> to now point to mime <<${o.mime}>>`),o.filepattern&&e.filepattern===o.filepattern&&console.warn(`Overwriting filepattern <<${o.filepattern}>> to now point to mime <<${o.mime}>>`),o.firstline&&e.firstline===o.firstline&&console.warn(`Overwriting firstline <<${o.firstline}>> to now point to mime <<${o.mime}>>`))}))}(e,0,n)}function w(){m=m.filter((e=>e.userConfigured)),u=[]}function d(e,n){return function(e,n){let t;if(e)switch(e.scheme){case r.ny.file:t=e.fsPath;break;case r.ny.data:t=s.B6.parseMetaData(e).get(s.B6.META_DATA_LABEL);break;case r.ny.vscodeNotebookCell:t=void 0;break;default:t=e.path}if(!t)return[{id:"unknown",mime:o.K.unknown}];t=t.toLowerCase();const i=(0,a.P8)(t),p=g(t,i,c);if(p)return[p,{id:l.vH,mime:o.K.text}];const w=g(t,i,u);if(w)return[w,{id:l.vH,mime:o.K.text}];if(n){const e=function(e){if((0,f.LU)(e)&&(e=e.substr(1)),e.length>0)for(let n=m.length-1;n>=0;n--){const t=m[n];if(!t.firstline)continue;const i=e.match(t.firstline);if(i&&i.length>0)return t}}(n);if(e)return[e,{id:l.vH,mime:o.K.text}]}return[{id:"unknown",mime:o.K.unknown}]}(e,n).map((e=>e.id))}function g(e,n,t){let i,o,r;for(let a=t.length-1;a>=0;a--){const s=t[a];if(n===s.filenameLowercase){i=s;break}if(s.filepattern&&(!o||s.filepattern.length>o.filepattern.length)){const t=s.filepatternOnPath?e:n;s.filepatternLowercase?.(t)&&(o=s)}s.extension&&(!r||s.extension.length>r.extension.length)&&n.endsWith(s.extensionLowercase)&&(r=s)}return i||o||r||void 0}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,