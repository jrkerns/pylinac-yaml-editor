"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[6995,5996],{5996:(e,i,n)=>{n.r(i),n.d(i,{clearPlatformLanguageAssociations:()=>h,getLanguageIds:()=>d,registerPlatformLanguageAssociation:()=>c});var t=n(3958),a=n(3720),s=n(3072),r=n(8019),o=n(2467),g=n(6844),l=n(4957);let u=[],f=[],m=[];function c(e,i=!1){!function(e,i,n){const a=function(e){return{id:e.id,mime:e.mime,filename:e.filename,extension:e.extension,filepattern:e.filepattern,firstline:e.firstline,userConfigured:false,filenameLowercase:e.filename?e.filename.toLowerCase():void 0,extensionLowercase:e.extension?e.extension.toLowerCase():void 0,filepatternLowercase:e.filepattern?(0,t.qg)(e.filepattern.toLowerCase()):void 0,filepatternOnPath:!!e.filepattern&&e.filepattern.indexOf(r.SA.sep)>=0}}(e);u.push(a),a.userConfigured?m.push(a):f.push(a),n&&!a.userConfigured&&u.forEach((e=>{e.mime===a.mime||e.userConfigured||(a.extension&&e.extension===a.extension&&console.warn(`Overwriting extension <<${a.extension}>> to now point to mime <<${a.mime}>>`),a.filename&&e.filename===a.filename&&console.warn(`Overwriting filename <<${a.filename}>> to now point to mime <<${a.mime}>>`),a.filepattern&&e.filepattern===a.filepattern&&console.warn(`Overwriting filepattern <<${a.filepattern}>> to now point to mime <<${a.mime}>>`),a.firstline&&e.firstline===a.firstline&&console.warn(`Overwriting firstline <<${a.firstline}>> to now point to mime <<${a.mime}>>`))}))}(e,0,i)}function h(){u=u.filter((e=>e.userConfigured)),f=[]}function d(e,i){return function(e,i){let n;if(e)switch(e.scheme){case s.ny.file:n=e.fsPath;break;case s.ny.data:n=o.B6.parseMetaData(e).get(o.B6.META_DATA_LABEL);break;case s.ny.vscodeNotebookCell:n=void 0;break;default:n=e.path}if(!n)return[{id:"unknown",mime:a.K.unknown}];n=n.toLowerCase();const t=(0,r.P8)(n),c=p(n,t,m);if(c)return[c,{id:l.vH,mime:a.K.text}];const h=p(n,t,f);if(h)return[h,{id:l.vH,mime:a.K.text}];if(i){const e=function(e){if((0,g.LU)(e)&&(e=e.substr(1)),e.length>0)for(let i=u.length-1;i>=0;i--){const n=u[i];if(!n.firstline)continue;const t=e.match(n.firstline);if(t&&t.length>0)return n}}(i);if(e)return[e,{id:l.vH,mime:a.K.text}]}return[{id:"unknown",mime:a.K.unknown}]}(e,i).map((e=>e.id))}function p(e,i,n){let t,a,s;for(let r=n.length-1;r>=0;r--){const o=n[r];if(i===o.filenameLowercase){t=o;break}if(o.filepattern&&(!a||o.filepattern.length>a.filepattern.length)){const n=o.filepatternOnPath?e:i;o.filepatternLowercase?.(n)&&(a=o)}o.extension&&(!s||o.extension.length>s.extension.length)&&i.endsWith(o.extensionLowercase)&&(s=o)}return t||a||s||void 0}},6995:(e,i,n)=>{n.r(i),n.d(i,{LanguageIdCodec:()=>m,LanguagesRegistry:()=>c});var t=n(2106),a=n(998),s=n(6844),r=n(5996),o=n(4957),g=n(7142),l=n(7167);const u=Object.prototype.hasOwnProperty,f="vs.editor.nullLanguage";class m{constructor(){this._languageIdToLanguage=[],this._languageToLanguageId=new Map,this._register(f,0),this._register(o.vH,1),this._nextLanguageId=2}_register(e,i){this._languageIdToLanguage[i]=e,this._languageToLanguageId.set(e,i)}register(e){if(this._languageToLanguageId.has(e))return;const i=this._nextLanguageId++;this._register(e,i)}encodeLanguageId(e){return this._languageToLanguageId.get(e)||0}decodeLanguageId(e){return this._languageIdToLanguage[e]||f}}class c extends a.jG{static{this.instanceCount=0}constructor(e=!0,i=!1){super(),this._onDidChange=this._register(new t.vl),this.onDidChange=this._onDidChange.event,c.instanceCount++,this._warnOnOverwrite=i,this.languageIdCodec=new m,this._dynamicLanguages=[],this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},e&&(this._initializeFromRegistry(),this._register(o.W6.onDidChangeLanguages((e=>{this._initializeFromRegistry()}))))}dispose(){c.instanceCount--,super.dispose()}_initializeFromRegistry(){this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},(0,r.clearPlatformLanguageAssociations)();const e=[].concat(o.W6.getLanguages()).concat(this._dynamicLanguages);this._registerLanguages(e)}_registerLanguages(e){for(const i of e)this._registerLanguage(i);this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},Object.keys(this._languages).forEach((e=>{const i=this._languages[e];i.name&&(this._nameMap[i.name]=i.identifier),i.aliases.forEach((e=>{this._lowercaseNameMap[e.toLowerCase()]=i.identifier})),i.mimetypes.forEach((e=>{this._mimeTypesMap[e]=i.identifier}))})),l.O.as(g.Fd.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds()),this._onDidChange.fire()}_registerLanguage(e){const i=e.id;let n;u.call(this._languages,i)?n=this._languages[i]:(this.languageIdCodec.register(i),n={identifier:i,name:null,mimetypes:[],aliases:[],extensions:[],filenames:[],configurationFiles:[],icons:[]},this._languages[i]=n),this._mergeLanguage(n,e)}_mergeLanguage(e,i){const n=i.id;let t=null;if(Array.isArray(i.mimetypes)&&i.mimetypes.length>0&&(e.mimetypes.push(...i.mimetypes),t=i.mimetypes[0]),t||(t=`text/x-${n}`,e.mimetypes.push(t)),Array.isArray(i.extensions)){i.configuration?e.extensions=i.extensions.concat(e.extensions):e.extensions=e.extensions.concat(i.extensions);for(const e of i.extensions)(0,r.registerPlatformLanguageAssociation)({id:n,mime:t,extension:e},this._warnOnOverwrite)}if(Array.isArray(i.filenames))for(const a of i.filenames)(0,r.registerPlatformLanguageAssociation)({id:n,mime:t,filename:a},this._warnOnOverwrite),e.filenames.push(a);if(Array.isArray(i.filenamePatterns))for(const e of i.filenamePatterns)(0,r.registerPlatformLanguageAssociation)({id:n,mime:t,filepattern:e},this._warnOnOverwrite);if("string"==typeof i.firstLine&&i.firstLine.length>0){let e=i.firstLine;"^"!==e.charAt(0)&&(e="^"+e);try{const i=new RegExp(e);(0,s.eY)(i)||(0,r.registerPlatformLanguageAssociation)({id:n,mime:t,firstline:i},this._warnOnOverwrite)}catch(n){console.warn(`[${i.id}]: Invalid regular expression \`${e}\`: `,n)}}e.aliases.push(n);let a=null;if(void 0!==i.aliases&&Array.isArray(i.aliases)&&(a=0===i.aliases.length?[null]:i.aliases),null!==a)for(const i of a)i&&0!==i.length&&e.aliases.push(i);const o=null!==a&&a.length>0;if(o&&null===a[0]);else{const i=(o?a[0]:null)||n;!o&&e.name||(e.name=i)}i.configuration&&e.configurationFiles.push(i.configuration),i.icon&&e.icons.push(i.icon)}isRegisteredLanguageId(e){return!!e&&u.call(this._languages,e)}getRegisteredLanguageIds(){return Object.keys(this._languages)}getLanguageIdByLanguageName(e){const i=e.toLowerCase();return u.call(this._lowercaseNameMap,i)?this._lowercaseNameMap[i]:null}getLanguageIdByMimeType(e){return e&&u.call(this._mimeTypesMap,e)?this._mimeTypesMap[e]:null}guessLanguageIdByFilepathOrFirstLine(e,i){return e||i?(0,r.getLanguageIds)(e,i):[]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,