"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[5947],{8518:(e,t,r)=>{r.d(t,{No:()=>l,TH:()=>s,Zn:()=>c,_1:()=>g,kb:()=>u});var i=r(8019),n=r(3339),o=r(6844);function a(e){return 47===e||92===e}function s(e){return e.replace(/[\\/]/g,i.SA.sep)}function u(e){return-1===e.indexOf("/")&&(e=s(e)),/^[a-zA-Z]:(\/|$)/.test(e)&&(e="/"+e),e}function c(e,t=i.SA.sep){if(!e)return"";const r=e.length,n=e.charCodeAt(0);if(a(n)){if(a(e.charCodeAt(1))&&!a(e.charCodeAt(2))){let i=3;const n=i;for(;i<r&&!a(e.charCodeAt(i));i++);if(n!==i&&!a(e.charCodeAt(i+1)))for(i+=1;i<r;i++)if(a(e.charCodeAt(i)))return e.slice(0,i+1).replace(/[\\/]/g,t)}return t}if(h(n)&&58===e.charCodeAt(1))return a(e.charCodeAt(2))?e.slice(0,2)+t:e.slice(0,2);let o=e.indexOf("://");if(-1!==o)for(o+=3;o<r;o++)if(a(e.charCodeAt(o)))return e.slice(0,o+1);return""}function g(e,t,r,n=i.Vn){if(e===t)return!0;if(!e||!t)return!1;if(t.length>e.length)return!1;if(r){if(!(0,o.ns)(e,t))return!1;if(t.length===e.length)return!0;let r=t.length;return t.charAt(t.length-1)===n&&r--,e.charAt(r)===n}return t.charAt(t.length-1)!==n&&(t+=n),0===e.indexOf(t)}function h(e){return e>=65&&e<=90||e>=97&&e<=122}function l(e,t=n.uF){return!!t&&h(e.charCodeAt(0))&&58===e.charCodeAt(1)}},3720:(e,t,r)=>{r.d(t,{K:()=>i});const i=Object.freeze({text:"text/plain",binary:"application/octet-stream",unknown:"application/unknown",markdown:"text/markdown",latex:"text/latex",uriList:"text/uri-list"})},2467:(e,t,r)=>{r.d(t,{B6:()=>S,Fd:()=>y,LC:()=>p,P8:()=>f,Pi:()=>d,er:()=>h,iZ:()=>m,n4:()=>l,o1:()=>b,pD:()=>v,su:()=>c,uJ:()=>C});var i=r(8518),n=r(3072),o=r(8019),a=r(3339),s=r(6844),u=r(7264);function c(e){return(0,u.I)(e,!0)}class g{constructor(e){this._ignorePathCasing=e}compare(e,t,r=!1){return e===t?0:(0,s.UD)(this.getComparisonKey(e,r),this.getComparisonKey(t,r))}isEqual(e,t,r=!1){return e===t||!(!e||!t)&&this.getComparisonKey(e,r)===this.getComparisonKey(t,r)}getComparisonKey(e,t=!1){return e.with({path:this._ignorePathCasing(e)?e.path.toLowerCase():void 0,fragment:t?null:void 0}).toString()}isEqualOrParent(e,t,r=!1){if(e.scheme===t.scheme){if(e.scheme===n.ny.file)return i._1(c(e),c(t),this._ignorePathCasing(e))&&e.query===t.query&&(r||e.fragment===t.fragment);if(D(e.authority,t.authority))return i._1(e.path,t.path,this._ignorePathCasing(e),"/")&&e.query===t.query&&(r||e.fragment===t.fragment)}return!1}joinPath(e,...t){return u.r.joinPath(e,...t)}basenameOrAuthority(e){return f(e)||e.authority}basename(e){return o.SA.basename(e.path)}extname(e){return o.SA.extname(e.path)}dirname(e){if(0===e.path.length)return e;let t;return e.scheme===n.ny.file?t=u.r.file(o.pD(c(e))).path:(t=o.SA.dirname(e.path),e.authority&&t.length&&47!==t.charCodeAt(0)&&(console.error(`dirname("${e.toString})) resulted in a relative path`),t="/")),e.with({path:t})}normalizePath(e){if(!e.path.length)return e;let t;return t=e.scheme===n.ny.file?u.r.file(o.S8(c(e))).path:o.SA.normalize(e.path),e.with({path:t})}relativePath(e,t){if(e.scheme!==t.scheme||!D(e.authority,t.authority))return;if(e.scheme===n.ny.file){const r=o.V8(c(e),c(t));return a.uF?i.TH(r):r}let r=e.path||"/";const s=t.path||"/";if(this._ignorePathCasing(e)){let e=0;for(const t=Math.min(r.length,s.length);e<t&&(r.charCodeAt(e)===s.charCodeAt(e)||r.charAt(e).toLowerCase()===s.charAt(e).toLowerCase());e++);r=s.substr(0,e)+r.substr(e)}return o.SA.relative(r,s)}resolvePath(e,t){if(e.scheme===n.ny.file){const r=u.r.file(o.hd(c(e),t));return e.with({authority:r.authority,path:r.path})}return t=i.kb(t),e.with({path:o.SA.resolve(e.path,t)})}isAbsolutePath(e){return!!e.path&&"/"===e.path[0]}isEqualAuthority(e,t){return e===t||void 0!==e&&void 0!==t&&(0,s.Q_)(e,t)}hasTrailingPathSeparator(e,t=o.Vn){if(e.scheme===n.ny.file){const r=c(e);return r.length>i.Zn(r).length&&r[r.length-1]===t}{const t=e.path;return t.length>1&&47===t.charCodeAt(t.length-1)&&!/^[a-zA-Z]:(\/$|\\$)/.test(e.fsPath)}}removeTrailingPathSeparator(e,t=o.Vn){return P(e,t)?e.with({path:e.path.substr(0,e.path.length-1)}):e}addTrailingPathSeparator(e,t=o.Vn){let r=!1;if(e.scheme===n.ny.file){const n=c(e);r=void 0!==n&&n.length===i.Zn(n).length&&n[n.length-1]===t}else{t="/";const i=e.path;r=1===i.length&&47===i.charCodeAt(i.length-1)}return r||P(e,t)?e:e.with({path:e.path+"/"})}}const h=new g((()=>!1)),l=(new g((e=>e.scheme!==n.ny.file||!a.j9)),new g((e=>!0)),h.isEqual.bind(h)),d=(h.isEqualOrParent.bind(h),h.getComparisonKey.bind(h),h.basenameOrAuthority.bind(h)),f=h.basename.bind(h),p=h.extname.bind(h),v=h.dirname.bind(h),C=h.joinPath.bind(h),y=h.normalizePath.bind(h),m=h.relativePath.bind(h),b=h.resolvePath.bind(h),D=(h.isAbsolutePath.bind(h),h.isEqualAuthority.bind(h)),P=h.hasTrailingPathSeparator.bind(h);var S;h.removeTrailingPathSeparator.bind(h),h.addTrailingPathSeparator.bind(h),function(e){e.META_DATA_LABEL="label",e.META_DATA_DESCRIPTION="description",e.META_DATA_SIZE="size",e.META_DATA_MIME="mime",e.parseMetaData=function(t){const r=new Map;t.path.substring(t.path.indexOf(";")+1,t.path.lastIndexOf(";")).split(";").forEach((e=>{const[t,i]=e.split(":");t&&i&&r.set(t,i)}));const i=t.path.substring(0,t.path.indexOf(";"));return i&&r.set(e.META_DATA_MIME,i),r}}(S||(S={}))},4957:(e,t,r)=>{r.d(t,{W6:()=>u,vH:()=>c});var i=r(9746),n=r(2106),o=r(7167),a=r(3720),s=r(7142);const u=new class{constructor(){this._onDidChangeLanguages=new n.vl,this.onDidChangeLanguages=this._onDidChangeLanguages.event,this._languages=[]}registerLanguage(e){return this._languages.push(e),this._onDidChangeLanguages.fire(void 0),{dispose:()=>{for(let t=0,r=this._languages.length;t<r;t++)if(this._languages[t]===e)return void this._languages.splice(t,1)}}}getLanguages(){return this._languages}};o.O.add("editor.modesRegistry",u);const c="plaintext";u.registerLanguage({id:c,extensions:[".txt"],aliases:[i.kg("plainText.alias","Plain Text"),"text"],mimetypes:[a.K.text]}),o.O.as(s.Fd.Configuration).registerDefaultConfigurations([{overrides:{"[plaintext]":{"editor.unicodeHighlight.ambiguousCharacters":!1,"editor.unicodeHighlight.invisibleCharacters":!1}}}])},5753:(e,t,r)=>{r.d(t,{Mo:()=>c,ad:()=>n,gD:()=>u,iB:()=>a,kW:()=>o,pG:()=>i});const i=(0,r(2399).u1)("configurationService");function n(e,t){const r=Object.create(null);for(const i in e)o(r,i,e[i],t);return r}function o(e,t,r,i){const n=t.split("."),o=n.pop();let a=e;for(let e=0;e<n.length;e++){const r=n[e];let o=a[r];switch(typeof o){case"undefined":o=a[r]=Object.create(null);break;case"object":if(null===o)return void i(`Ignoring ${t} as ${n.slice(0,e+1).join(".")} is null`);break;default:return void i(`Ignoring ${t} as ${n.slice(0,e+1).join(".")} is ${JSON.stringify(o)}`)}a=o}if("object"==typeof a&&null!==a)try{a[o]=r}catch(e){i(`Ignoring ${t} as ${n.join(".")} is ${JSON.stringify(a)}`)}else i(`Ignoring ${t} as ${n.join(".")} is ${JSON.stringify(a)}`)}function a(e,t){s(e,t.split("."))}function s(e,t){const r=t.shift();if(0!==t.length){if(-1!==Object.keys(e).indexOf(r)){const i=e[r];"object"!=typeof i||Array.isArray(i)||(s(i,t),0===Object.keys(i).length&&delete e[r])}}else delete e[r]}function u(e,t,r){const i=function(e,t){let r=e;for(const e of t){if("object"!=typeof r||null===r)return;r=r[e]}return r}(e,t.split("."));return void 0===i?r:i}function c(e){return e.replace(/[\[\]]/g,"")}},7142:(e,t,r)=>{r.d(t,{Fd:()=>g,Gv:()=>S,rC:()=>P});var i=r(3338),n=r(2106),o=r(9359),a=r(9746),s=r(5753),u=r(1460),c=r(7167);const g={Configuration:"base.contributions.configuration"},h={properties:{},patternProperties:{}},l={properties:{},patternProperties:{}},d={properties:{},patternProperties:{}},f={properties:{},patternProperties:{}},p={properties:{},patternProperties:{}},v={properties:{},patternProperties:{}},C="vscode://schemas/settings/resourceLanguage",y=c.O.as(u.F.JSONContribution),m="\\[([^\\]]+)\\]",b=new RegExp(m,"g"),D=`^(${m})+$`,P=new RegExp(D);function S(e){const t=[];if(P.test(e)){let r=b.exec(e);for(;r?.length;){const i=r[1].trim();i&&t.push(i),r=b.exec(e)}}return(0,i.dM)(t)}const O=new class{constructor(){this.registeredConfigurationDefaults=[],this.overrideIdentifiers=new Set,this._onDidSchemaChange=new n.vl,this._onDidUpdateConfiguration=new n.vl,this.configurationDefaultsOverrides=new Map,this.defaultLanguageConfigurationOverridesNode={id:"defaultOverrides",title:a.kg("defaultLanguageConfigurationOverrides.title","Default Language Configuration Overrides"),properties:{}},this.configurationContributors=[this.defaultLanguageConfigurationOverridesNode],this.resourceLanguageSettingsSchema={properties:{},patternProperties:{},additionalProperties:!0,allowTrailingCommas:!0,allowComments:!0},this.configurationProperties={},this.policyConfigurations=new Map,this.excludedConfigurationProperties={},y.registerSchema(C,this.resourceLanguageSettingsSchema),this.registerOverridePropertyPatternKey()}registerConfiguration(e,t=!0){this.registerConfigurations([e],t)}registerConfigurations(e,t=!0){const r=new Set;this.doRegisterConfigurations(e,t,r),y.registerSchema(C,this.resourceLanguageSettingsSchema),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties:r})}registerDefaultConfigurations(e){const t=new Set;this.doRegisterDefaultConfigurations(e,t),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties:t,defaultsOverrides:!0})}doRegisterDefaultConfigurations(e,t){this.registeredConfigurationDefaults.push(...e);const r=[];for(const{overrides:i,source:n}of e)for(const e in i){t.add(e);const o=this.configurationDefaultsOverrides.get(e)??this.configurationDefaultsOverrides.set(e,{configurationDefaultOverrides:[]}).get(e),a=i[e];if(o.configurationDefaultOverrides.push({value:a,source:n}),P.test(e)){const t=this.mergeDefaultConfigurationsForOverrideIdentifier(e,a,n,o.configurationDefaultOverrideValue);if(!t)continue;o.configurationDefaultOverrideValue=t,this.updateDefaultOverrideProperty(e,t,n),r.push(...S(e))}else{const t=this.mergeDefaultConfigurationsForConfigurationProperty(e,a,n,o.configurationDefaultOverrideValue);if(!t)continue;o.configurationDefaultOverrideValue=t;const r=this.configurationProperties[e];r&&(this.updatePropertyDefaultValue(e,r),this.updateSchema(e,r))}}this.doRegisterOverrideIdentifiers(r)}updateDefaultOverrideProperty(e,t,r){const i={type:"object",default:t.value,description:a.kg("defaultLanguageConfiguration.description","Configure settings to be overridden for the {0} language.",(0,s.Mo)(e)),$ref:C,defaultDefaultValue:t.value,source:r,defaultValueSource:r};this.configurationProperties[e]=i,this.defaultLanguageConfigurationOverridesNode.properties[e]=i}mergeDefaultConfigurationsForOverrideIdentifier(e,t,r,i){const n=i?.value||{},a=i?.source??new Map;if(a instanceof Map){for(const e of Object.keys(t)){const i=t[e];if(o.Gv(i)&&(o.b0(n[e])||o.Gv(n[e]))){if(n[e]={...n[e]??{},...i},r)for(const t in i)a.set(`${e}.${t}`,r)}else n[e]=i,r?a.set(e,r):a.delete(e)}return{value:n,source:a}}console.error("objectConfigurationSources is not a Map")}mergeDefaultConfigurationsForConfigurationProperty(e,t,r,i){const n=this.configurationProperties[e],a=i?.value??n?.defaultDefaultValue;let s=r;if(o.Gv(t)&&(void 0!==n&&"object"===n.type||void 0===n&&(o.b0(a)||o.Gv(a)))){if(s=i?.source??new Map,!(s instanceof Map))return void console.error("defaultValueSource is not a Map");for(const i in t)r&&s.set(`${e}.${i}`,r);t={...o.Gv(a)?a:{},...t}}return{value:t,source:s}}registerOverrideIdentifiers(e){this.doRegisterOverrideIdentifiers(e),this._onDidSchemaChange.fire()}doRegisterOverrideIdentifiers(e){for(const t of e)this.overrideIdentifiers.add(t);this.updateOverridePropertyPatternKey()}doRegisterConfigurations(e,t,r){e.forEach((e=>{this.validateAndRegisterProperties(e,t,e.extensionInfo,e.restrictedProperties,void 0,r),this.configurationContributors.push(e),this.registerJSONConfiguration(e)}))}validateAndRegisterProperties(e,t=!0,r,i,n=3,a){n=o.z(e.scope)?n:e.scope;const s=e.properties;if(s)for(const e in s){const u=s[e];t&&A(e,u)?delete s[e]:(u.source=r,u.defaultDefaultValue=s[e].default,this.updatePropertyDefaultValue(e,u),P.test(e)?u.scope=void 0:(u.scope=o.z(u.scope)?n:u.scope,u.restricted=o.z(u.restricted)?!!i?.includes(e):u.restricted),!s[e].hasOwnProperty("included")||s[e].included?(this.configurationProperties[e]=s[e],s[e].policy?.name&&this.policyConfigurations.set(s[e].policy.name,e),!s[e].deprecationMessage&&s[e].markdownDeprecationMessage&&(s[e].deprecationMessage=s[e].markdownDeprecationMessage),a.add(e)):(this.excludedConfigurationProperties[e]=s[e],delete s[e]))}const u=e.allOf;if(u)for(const e of u)this.validateAndRegisterProperties(e,t,r,i,n,a)}getConfigurationProperties(){return this.configurationProperties}getPolicyConfigurations(){return this.policyConfigurations}registerJSONConfiguration(e){const t=e=>{const r=e.properties;if(r)for(const e in r)this.updateSchema(e,r[e]);const i=e.allOf;i?.forEach(t)};t(e)}updateSchema(e,t){switch(h.properties[e]=t,t.scope){case 1:l.properties[e]=t;break;case 2:d.properties[e]=t;break;case 6:f.properties[e]=t;break;case 3:p.properties[e]=t;break;case 4:v.properties[e]=t;break;case 5:v.properties[e]=t,this.resourceLanguageSettingsSchema.properties[e]=t}}updateOverridePropertyPatternKey(){for(const e of this.overrideIdentifiers.values()){const t=`[${e}]`,r={type:"object",description:a.kg("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:a.kg("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:C};this.updatePropertyDefaultValue(t,r),h.properties[t]=r,l.properties[t]=r,d.properties[t]=r,f.properties[t]=r,p.properties[t]=r,v.properties[t]=r}}registerOverridePropertyPatternKey(){const e={type:"object",description:a.kg("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:a.kg("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:C};h.patternProperties[D]=e,l.patternProperties[D]=e,d.patternProperties[D]=e,f.patternProperties[D]=e,p.patternProperties[D]=e,v.patternProperties[D]=e,this._onDidSchemaChange.fire()}updatePropertyDefaultValue(e,t){const r=this.configurationDefaultsOverrides.get(e)?.configurationDefaultOverrideValue;let i,n;!r||t.disallowConfigurationDefault&&r.source||(i=r.value,n=r.source),o.b0(i)&&(i=t.defaultDefaultValue,n=void 0),o.b0(i)&&(i=function(e){switch(Array.isArray(e)?e[0]:e){case"boolean":return!1;case"integer":case"number":return 0;case"string":return"";case"array":return[];case"object":return{};default:return null}}(t.type)),t.default=i,t.defaultValueSource=n}};function A(e,t){return e.trim()?P.test(e)?a.kg("config.property.languageDefault","Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",e):void 0!==O.getConfigurationProperties()[e]?a.kg("config.property.duplicate","Cannot register '{0}'. This property is already registered.",e):t.policy?.name&&void 0!==O.getPolicyConfigurations().get(t.policy?.name)?a.kg("config.policy.duplicate","Cannot register '{0}'. The associated policy {1} is already registered with {2}.",e,t.policy?.name,O.getPolicyConfigurations().get(t.policy?.name)):null:a.kg("config.property.empty","Cannot register an empty property")}c.O.add(g.Configuration,O)},2399:(e,t,r)=>{var i;r.d(t,{_$:()=>i,_Y:()=>n,u1:()=>o}),function(e){e.serviceIds=new Map,e.DI_TARGET="$di$target",e.DI_DEPENDENCIES="$di$dependencies",e.getServiceDependencies=function(t){return t[e.DI_DEPENDENCIES]||[]}}(i||(i={}));const n=o("instantiationService");function o(e){if(i.serviceIds.has(e))return i.serviceIds.get(e);const t=function(e,r,n){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");!function(e,t,r){t[i.DI_TARGET]===t?t[i.DI_DEPENDENCIES].push({id:e,index:r}):(t[i.DI_DEPENDENCIES]=[{id:e,index:r}],t[i.DI_TARGET]=t)}(t,e,n)};return t.toString=()=>e,i.serviceIds.set(e,t),t}},1460:(e,t,r)=>{r.d(t,{F:()=>o});var i=r(2106),n=r(7167);const o={JSONContribution:"base.contributions.json"},a=new class{constructor(){this._onDidChangeSchema=new i.vl,this.schemasById={}}registerSchema(e,t){var r;this.schemasById[(r=e,r.length>0&&"#"===r.charAt(r.length-1)?r.substring(0,r.length-1):r)]=t,this._onDidChangeSchema.fire(e)}notifySchemaChanged(e){this._onDidChangeSchema.fire(e)}};n.O.add(o.JSONContribution,a)},7167:(e,t,r)=>{r.d(t,{O:()=>o});var i=r(7110),n=r(9359);const o=new class{constructor(){this.data=new Map}add(e,t){i.ok(n.Kg(e)),i.ok(n.Gv(t)),i.ok(!this.data.has(e),"There is already an extension with this id"),this.data.set(e,t)}as(e){return this.data.get(e)||null}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,