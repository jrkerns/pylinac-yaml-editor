"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[304,5767,5628,2603],{8436:(e,t,r)=>{function i(e,t){const r=[],i=[];for(const i of e)t.has(i)||r.push(i);for(const r of t)e.has(r)||i.push(r);return{removed:r,added:i}}function n(e,t){const r=new Set;for(const i of t)e.has(i)&&r.add(i);return r}r.d(t,{E:()=>n,Z:()=>i})},2992:(e,t,r)=>{function i(e,t,r){return Math.min(Math.max(e,t),r)}r.d(t,{Uq:()=>n,mu:()=>s,qE:()=>i});class n{constructor(){this._n=1,this._val=0}update(e){return this._val=this._val+(e-this._val)/this._n,this._n+=1,this._val}get value(){return this._val}}class s{constructor(e){this._n=0,this._val=0,this._values=[],this._index=0,this._sum=0,this._values=new Array(e),this._values.fill(0,0,e)}update(e){const t=this._values[this._index];return this._values[this._index]=e,this._index=(this._index+1)%this._values.length,this._sum-=t,this._sum+=e,this._n<this._values.length&&(this._n+=1),this._val=this._sum/this._n,this._val}get value(){return this._val}}},6459:(e,t,r)=>{r.d(t,{A:()=>s});var i,n=r(6844);!function(e){e[e.Ignore=0]="Ignore",e[e.Info=1]="Info",e[e.Warning=2]="Warning",e[e.Error=3]="Error"}(i||(i={})),function(e){const t="error",r="warning",i="info";e.fromValue=function(s){return s?n.Q_(t,s)?e.Error:n.Q_(r,s)||n.Q_("warn",s)?e.Warning:n.Q_(i,s)?e.Info:e.Ignore:e.Ignore},e.toString=function(n){switch(n){case e.Error:return t;case e.Warning:return r;case e.Info:return i;default:return"ignore"}}}(i||(i={}));const s=i},8881:(e,t,r)=>{r.d(t,{L:()=>n});var i,n,s=r(5915);!function(e){e.isThemeColor=function(e){return e&&"object"==typeof e&&"string"==typeof e.id}}(i||(i={})),function(e){e.iconNameSegment="[A-Za-z0-9]+",e.iconNameExpression="[A-Za-z0-9-]+",e.iconModifierExpression="~[A-Za-z]+",e.iconNameCharacter="[A-Za-z0-9~-]";const t=new RegExp(`^(${e.iconNameExpression})(${e.iconModifierExpression})?$`);function r(e){const i=t.exec(e.id);if(!i)return r(s.W.error);const[,n,o]=i,a=["codicon","codicon-"+n];return o&&a.push("codicon-modifier-"+o.substring(1)),a}e.asClassNameArray=r,e.asClassName=function(e){return r(e).join(" ")},e.asCSSSelector=function(e){return"."+r(e).join(".")},e.isThemeIcon=function(e){return e&&"object"==typeof e&&"string"==typeof e.id&&(void 0===e.color||i.isThemeColor(e.color))};const n=new RegExp(`^\\$\\((${e.iconNameExpression}(?:${e.iconModifierExpression})?)\\)$`);e.fromString=function(e){const t=n.exec(e);if(!t)return;const[,r]=t;return{id:r}},e.fromId=function(e){return{id:e}},e.modify=function(e,t){let r=e.id;const i=r.lastIndexOf("~");return-1!==i&&(r=r.substring(0,i)),t&&(r=`${r}~${t}`),{id:r}},e.getModifier=function(e){const t=e.id.lastIndexOf("~");if(-1!==t)return e.id.substring(t+1)},e.isEqual=function(e,t){return e.id===t.id&&e.color?.id===t.color?.id}}(n||(n={}))},4403:(e,t,r)=>{r.d(t,{f:()=>s});var i=r(3958),n=r(8019);function s(e,t,r,o,a,c){if(Array.isArray(e)){let i=0;for(const n of e){const e=s(n,t,r,o,a,c);if(10===e)return e;e>i&&(i=e)}return i}if("string"==typeof e)return o?"*"===e?5:e===r?10:0:0;if(e){const{language:s,pattern:h,scheme:u,hasAccessToAllModels:d,notebookType:l}=e;if(!o&&!d)return 0;l&&a&&(t=a);let f=0;if(u)if(u===t.scheme)f=10;else{if("*"!==u)return 0;f=5}if(s)if(s===r)f=10;else{if("*"!==s)return 0;f=Math.max(f,5)}if(l)if(l===c)f=10;else{if("*"!==l||void 0===c)return 0;f=Math.max(f,5)}if(h){let e;if(e="string"==typeof h?h:{...h,base:(0,n.S8)(h.base)},e!==t.fsPath&&!(0,i.YW)(e,t.fsPath))return 0;f=10}return f}return 0}},304:(e,t,r)=>{r.r(t),r.d(t,{IEditorWorkerService:()=>i});const i=(0,r(2399).u1)("editorWorkerService")},5767:(e,t,r)=>{r.r(t),r.d(t,{getIconClasses:()=>u});var i=r(3072),n=r(2467),s=r(7264),o=r(4957),a=r(9971),c=r(8881);const h=/(?:\/|^)(?:([^\/]+)\/)?([^\/]+)$/;function u(e,t,r,u,l){if(c.L.isThemeIcon(l))return[`codicon-${l.id}`,"predefined-file-icon"];if(s.r.isUri(l))return[];const f=u===a.p.ROOT_FOLDER?["rootfolder-icon"]:u===a.p.FOLDER?["folder-icon"]:["file-icon"];if(r){let s;if(r.scheme===i.ny.data)s=n.B6.parseMetaData(r).get(n.B6.META_DATA_LABEL);else{const e=r.path.match(h);e?(s=d(e[2].toLowerCase()),e[1]&&f.push(`${d(e[1].toLowerCase())}-name-dir-icon`)):s=d(r.authority.toLowerCase())}if(u===a.p.ROOT_FOLDER)f.push(`${s}-root-name-folder-icon`);else if(u===a.p.FOLDER)f.push(`${s}-name-folder-icon`);else{if(s){if(f.push(`${s}-name-file-icon`),f.push("name-file-icon"),s.length<=255){const e=s.split(".");for(let t=1;t<e.length;t++)f.push(`${e.slice(t).join(".")}-ext-file-icon`)}f.push("ext-file-icon")}const a=function(e,t,r){if(!r)return null;let s=null;if(r.scheme===i.ny.data){const e=n.B6.parseMetaData(r).get(n.B6.META_DATA_MIME);e&&(s=t.getLanguageIdByMimeType(e))}else{const t=e.getModel(r);t&&(s=t.getLanguageId())}return s&&s!==o.vH?s:t.guessLanguageIdByFilepathOrFirstLine(r)}(e,t,r);a&&f.push(`${d(a)}-lang-file-icon`)}}return f}function d(e){return e.replace(/[\s]/g,"/")}},2060:(e,t,r)=>{r.r(t),r.d(t,{ILanguageFeatureDebounceService:()=>l,LanguageFeatureDebounceService:()=>m});var i=r(2344),n=r(7992),s=r(2992),o=r(8195),a=r(6726),c=r(2399),h=r(6441),u=r(3072),d=function(e,t){return function(r,i){t(r,i,e)}};const l=(0,c.u1)("ILanguageFeatureDebounceService");var f;!function(e){const t=new WeakMap;let r=0;e.of=function(e){let i=t.get(e);return void 0===i&&(i=++r,t.set(e,i)),i}}(f||(f={}));class g{constructor(e){this._default=e}get(e){return this._default}update(e,t){return this._default}default(){return this._default}}class _{constructor(e,t,r,i,s,o){this._logService=e,this._name=t,this._registry=r,this._default=i,this._min=s,this._max=o,this._cache=new n.qK(50,.7)}_key(e){return e.id+this._registry.all(e).reduce(((e,t)=>(0,i.sN)(f.of(t),e)),0)}get(e){const t=this._key(e),r=this._cache.get(t);return r?(0,s.qE)(r.value,this._min,this._max):this.default()}update(e,t){const r=this._key(e);let i=this._cache.get(r);i||(i=new s.mu(6),this._cache.set(r,i));const n=(0,s.qE)(i.update(t),this._min,this._max);return(0,u.v$)(e.uri,"output")||this._logService.trace(`[DEBOUNCE: ${this._name}] for ${e.uri.toString()} is ${n}ms`),n}_overall(){const e=new s.Uq;for(const[,t]of this._cache)e.update(t.value);return e.value}default(){const e=0|this._overall()||this._default;return(0,s.qE)(e,this._min,this._max)}}let m=class{constructor(e,t){this._logService=e,this._data=new Map,this._isDev=t.isExtensionDevelopment||!t.isBuilt}for(e,t,r){const i=r?.min??50,n=r?.max??i**2,s=r?.key??void 0,o=`${f.of(e)},${i}${s?","+s:""}`;let a=this._data.get(o);return a||(this._isDev?(this._logService.debug(`[DEBOUNCE: ${t}] is disabled in developed mode`),a=new g(1.5*i)):a=new _(this._logService,t,e,0|this._overallAverage()||1.5*i,i,n),this._data.set(o,a)),a}_overallAverage(){const e=new s.Uq;for(const t of this._data.values())e.update(t.default());return e.value}};m=function(e,t,r,i){var n,s=arguments.length,o=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(o=(s<3?n(o):s>3?n(t,r,o):n(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o}([d(0,h.rr),d(1,o.k)],m),(0,a.v)(l,m,1)},2230:(e,t,r)=>{r.r(t),r.d(t,{ILanguageFeaturesService:()=>i});const i=(0,r(2399).u1)("ILanguageFeaturesService")},1197:(e,t,r)=>{r.r(t),r.d(t,{LanguageFeaturesService:()=>f});var i=r(2106),n=r(998),s=r(6055),o=r(4403);function a(e){return"string"!=typeof e&&(Array.isArray(e)?e.every(a):!!e.exclusive)}class c{constructor(e,t,r,i,n){this.uri=e,this.languageId=t,this.notebookUri=r,this.notebookType=i,this.recursive=n}equals(e){return this.notebookType===e.notebookType&&this.languageId===e.languageId&&this.uri.toString()===e.uri.toString()&&this.notebookUri?.toString()===e.notebookUri?.toString()&&this.recursive===e.recursive}}class h{constructor(e){this._notebookInfoResolver=e,this._clock=0,this._entries=[],this._onDidChange=new i.vl,this.onDidChange=this._onDidChange.event}register(e,t){let r={selector:e,provider:t,_score:-1,_time:this._clock++};return this._entries.push(r),this._lastCandidate=void 0,this._onDidChange.fire(this._entries.length),(0,n.s)((()=>{if(r){const e=this._entries.indexOf(r);e>=0&&(this._entries.splice(e,1),this._lastCandidate=void 0,this._onDidChange.fire(this._entries.length),r=void 0)}}))}has(e){return this.all(e).length>0}all(e){if(!e)return[];this._updateScores(e,!1);const t=[];for(const e of this._entries)e._score>0&&t.push(e.provider);return t}ordered(e,t=!1){const r=[];return this._orderedForEach(e,t,(e=>r.push(e.provider))),r}orderedGroups(e){const t=[];let r,i;return this._orderedForEach(e,!1,(e=>{r&&i===e._score?r.push(e.provider):(i=e._score,r=[e.provider],t.push(r))})),t}_orderedForEach(e,t,r){this._updateScores(e,t);for(const e of this._entries)e._score>0&&r(e)}_updateScores(e,t){const r=this._notebookInfoResolver?.(e.uri),i=r?new c(e.uri,e.getLanguageId(),r.uri,r.type,t):new c(e.uri,e.getLanguageId(),void 0,void 0,t);if(!this._lastCandidate?.equals(i)){this._lastCandidate=i;for(const r of this._entries)if(r._score=(0,o.f)(r.selector,i.uri,i.languageId,(0,s.vd)(e),i.notebookUri,i.notebookType),a(r.selector)&&r._score>0){if(!t){for(const e of this._entries)e._score=0;r._score=1e3;break}r._score=0}this._entries.sort(h._compareByScoreAndTime)}}static _compareByScoreAndTime(e,t){return e._score<t._score?1:e._score>t._score?-1:u(e.selector)&&!u(t.selector)?1:!u(e.selector)&&u(t.selector)?-1:e._time<t._time?1:e._time>t._time?-1:0}}function u(e){return"string"!=typeof e&&(Array.isArray(e)?e.some(u):Boolean(e.isBuiltin))}var d=r(2230),l=r(6726);class f{constructor(){this.referenceProvider=new h(this._score.bind(this)),this.renameProvider=new h(this._score.bind(this)),this.newSymbolNamesProvider=new h(this._score.bind(this)),this.codeActionProvider=new h(this._score.bind(this)),this.definitionProvider=new h(this._score.bind(this)),this.typeDefinitionProvider=new h(this._score.bind(this)),this.declarationProvider=new h(this._score.bind(this)),this.implementationProvider=new h(this._score.bind(this)),this.documentSymbolProvider=new h(this._score.bind(this)),this.inlayHintsProvider=new h(this._score.bind(this)),this.colorProvider=new h(this._score.bind(this)),this.codeLensProvider=new h(this._score.bind(this)),this.documentFormattingEditProvider=new h(this._score.bind(this)),this.documentRangeFormattingEditProvider=new h(this._score.bind(this)),this.onTypeFormattingEditProvider=new h(this._score.bind(this)),this.signatureHelpProvider=new h(this._score.bind(this)),this.hoverProvider=new h(this._score.bind(this)),this.documentHighlightProvider=new h(this._score.bind(this)),this.multiDocumentHighlightProvider=new h(this._score.bind(this)),this.selectionRangeProvider=new h(this._score.bind(this)),this.foldingRangeProvider=new h(this._score.bind(this)),this.linkProvider=new h(this._score.bind(this)),this.inlineCompletionsProvider=new h(this._score.bind(this)),this.inlineEditProvider=new h(this._score.bind(this)),this.completionProvider=new h(this._score.bind(this)),this.linkedEditingRangeProvider=new h(this._score.bind(this)),this.documentRangeSemanticTokensProvider=new h(this._score.bind(this)),this.documentSemanticTokensProvider=new h(this._score.bind(this)),this.documentDropEditProvider=new h(this._score.bind(this)),this.documentPasteEditProvider=new h(this._score.bind(this))}_score(e){return this._notebookTypeResolver?.(e)}}(0,l.v)(d.ILanguageFeaturesService,f,1)},886:(e,t,r)=>{r.r(t),r.d(t,{IMarkerDecorationsService:()=>i});const i=(0,r(2399).u1)("markerDecorationsService")},11:(e,t,r)=>{r.r(t),r.d(t,{MarkerDecorationsService:()=>m});var i=r(0),n=r(998),s=r(6055),o=r(9044),a=r(8295),c=r(4830),h=r(8061),u=r(3072),d=r(2106),l=r(559),f=r(7992),g=r(8436),_=function(e,t){return function(r,i){t(r,i,e)}};let m=class extends n.jG{constructor(e,t){super(),this._markerService=t,this._onDidChangeMarker=this._register(new d.vl),this._markerDecorations=new f.fT,e.getModels().forEach((e=>this._onModelAdded(e))),this._register(e.onModelAdded(this._onModelAdded,this)),this._register(e.onModelRemoved(this._onModelRemoved,this)),this._register(this._markerService.onMarkerChanged(this._handleMarkerChange,this))}dispose(){super.dispose(),this._markerDecorations.forEach((e=>e.dispose())),this._markerDecorations.clear()}getMarker(e,t){const r=this._markerDecorations.get(e);return r&&r.getMarker(t)||null}_handleMarkerChange(e){e.forEach((e=>{const t=this._markerDecorations.get(e);t&&this._updateDecorations(t)}))}_onModelAdded(e){const t=new v(e);this._markerDecorations.set(e.uri,t),this._updateDecorations(t)}_onModelRemoved(e){const t=this._markerDecorations.get(e.uri);t&&(t.dispose(),this._markerDecorations.delete(e.uri)),e.uri.scheme!==u.ny.inMemory&&e.uri.scheme!==u.ny.internal&&e.uri.scheme!==u.ny.vscode||this._markerService?.read({resource:e.uri}).map((e=>e.owner)).forEach((t=>this._markerService.remove(t,[e.uri])))}_updateDecorations(e){const t=this._markerService.read({resource:e.model.uri,take:500});e.update(t)&&this._onDidChangeMarker.fire(e.model)}};m=function(e,t,r,i){var n,s=arguments.length,o=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(o=(s<3?n(o):s>3?n(t,r,o):n(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o}([_(0,c.IModelService),_(1,i.DR)],m);class v extends n.jG{constructor(e){super(),this.model=e,this._map=new f.cO,this._register((0,n.s)((()=>{this.model.deltaDecorations([...this._map.values()],[]),this._map.clear()})))}update(e){const{added:t,removed:r}=(0,g.Z)(new Set(this._map.keys()),new Set(e));if(0===t.length&&0===r.length)return!1;const i=r.map((e=>this._map.get(e))),n=t.map((e=>({range:this._createDecorationRange(this.model,e),options:this._createDecorationOption(e)}))),s=this.model.deltaDecorations(i,n);for(const e of r)this._map.delete(e);for(let e=0;e<s.length;e++)this._map.set(t[e],s[e]);return!0}getMarker(e){return this._map.getKey(e.id)}_createDecorationRange(e,t){let r=h.Q.lift(t);if(t.severity!==i.cj.Hint||this._hasMarkerTag(t,1)||this._hasMarkerTag(t,2)||(r=r.setEndPosition(r.startLineNumber,r.startColumn+2)),r=e.validateRange(r),r.isEmpty()){const t=e.getLineLastNonWhitespaceColumn(r.startLineNumber)||e.getLineMaxColumn(r.startLineNumber);if(1===t||r.endColumn>=t)return r;const i=e.getWordAtPosition(r.getStartPosition());i&&(r=new h.Q(r.startLineNumber,i.startColumn,r.endLineNumber,i.endColumn))}else if(t.endColumn===Number.MAX_VALUE&&1===t.startColumn&&r.startLineNumber===r.endLineNumber){const i=e.getLineFirstNonWhitespaceColumn(t.startLineNumber);i<r.endColumn&&(r=new h.Q(r.startLineNumber,i,r.endLineNumber,r.endColumn),t.startColumn=i)}return r}_createDecorationOption(e){let t,r,n,c,h;switch(e.severity){case i.cj.Hint:t=this._hasMarkerTag(e,2)?void 0:this._hasMarkerTag(e,1)?"squiggly-unnecessary":"squiggly-hint",n=0;break;case i.cj.Info:t="squiggly-info",r=(0,o.Yf)(a.AQ),n=10,h={color:(0,o.Yf)(l.KoI),position:1};break;case i.cj.Warning:t="squiggly-warning",r=(0,o.Yf)(a.aZ),n=20,h={color:(0,o.Yf)(l.uMG),position:1};break;case i.cj.Error:default:t="squiggly-error",r=(0,o.Yf)(a.yI),n=30,h={color:(0,o.Yf)(l.yLC),position:1}}return e.tags&&(-1!==e.tags.indexOf(1)&&(c="squiggly-inline-unnecessary"),-1!==e.tags.indexOf(2)&&(c="squiggly-inline-deprecated")),{description:"marker-decoration",stickiness:1,className:t,showIfCollapsed:!0,overviewRuler:{color:r,position:s.A5.Right},minimap:h,zIndex:n,inlineClassName:c}}_hasMarkerTag(e,t){return!!e.tags&&e.tags.indexOf(t)>=0}}},4830:(e,t,r)=>{r.r(t),r.d(t,{IModelService:()=>i});const i=(0,r(2399).u1)("modelService")},7042:(e,t,r)=>{r.r(t),r.d(t,{ITextModelService:()=>i});const i=(0,r(2399).u1)("textModelService")},9376:(e,t,r)=>{r.r(t),r.d(t,{encodeSemanticTokensDto:()=>s});var i=r(2802),n=r(3339);function s(e){const t=new Uint32Array(function(e){let t=0;if(t+=2,"full"===e.type)t+=1+e.data.length;else{t+=1,t+=3*e.deltas.length;for(const r of e.deltas)r.data&&(t+=r.data.length)}return t}(e));let r=0;if(t[r++]=e.id,"full"===e.type)t[r++]=1,t[r++]=e.data.length,t.set(e.data,r),r+=e.data.length;else{t[r++]=2,t[r++]=e.deltas.length;for(const i of e.deltas)t[r++]=i.start,t[r++]=i.deleteCount,i.data?(t[r++]=i.data.length,t.set(i.data,r),r+=i.data.length):t[r++]=0}return function(e){const t=new Uint8Array(e.buffer,e.byteOffset,4*e.length);return n.cm()||function(e){for(let t=0,r=e.length;t<r;t+=4){const r=e[t+0],i=e[t+1],n=e[t+2],s=e[t+3];e[t+0]=s,e[t+1]=n,e[t+2]=i,e[t+3]=r}}(t),i.MB.wrap(t)}(t)}},2891:(e,t,r)=>{r.r(t),r.d(t,{ISemanticTokensStylingService:()=>i});const i=(0,r(2399).u1)("semanticTokensStylingService")},8148:(e,t,r)=>{r.r(t),r.d(t,{SemanticTokensStylingService:()=>d});var i=r(998),n=r(7922),s=r(9044),o=r(6441),a=r(9520),c=r(2891),h=r(6726),u=function(e,t){return function(r,i){t(r,i,e)}};let d=class extends i.jG{constructor(e,t,r){super(),this._themeService=e,this._logService=t,this._languageService=r,this._caches=new WeakMap,this._register(this._themeService.onDidColorThemeChange((()=>{this._caches=new WeakMap})))}getStyling(e){return this._caches.has(e)||this._caches.set(e,new a.SemanticTokensProviderStyling(e.getLegend(),this._themeService,this._languageService,this._logService)),this._caches.get(e)}};d=function(e,t,r,i){var n,s=arguments.length,o=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,r):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,i);else for(var a=e.length-1;a>=0;a--)(n=e[a])&&(o=(s<3?n(o):s>3?n(t,r,o):n(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o}([u(0,s.Gy),u(1,o.rr),u(2,n.L)],d),(0,h.v)(c.ISemanticTokensStylingService,d,1)},5628:(e,t,r)=>{r.r(t)},2603:(e,t,r)=>{r.r(t),r.d(t,{DraggedTreeItemsIdentifier:()=>n,TreeViewsDnDService:()=>i});class i{constructor(){this._dragOperations=new Map}removeDragOperationTransfer(e){if(e&&this._dragOperations.has(e)){const t=this._dragOperations.get(e);return this._dragOperations.delete(e),t}}}class n{constructor(e){this.identifier=e}}},6756:(e,t,r)=>{r.r(t),r.d(t,{ITreeViewsDnDService:()=>o});var i=r(6726),n=r(2399),s=r(2603);const o=(0,n.u1)("treeViewsDndService");(0,i.v)(o,s.TreeViewsDnDService,1)},8195:(e,t,r)=>{r.d(t,{k:()=>i});const i=(0,r(2399).u1)("environmentService")},9971:(e,t,r)=>{var i;r.d(t,{p:()=>i}),function(e){e[e.FILE=0]="FILE",e[e.FOLDER=1]="FOLDER",e[e.ROOT_FOLDER=2]="ROOT_FOLDER"}(i||(i={}))},0:(e,t,r)=>{r.d(t,{DR:()=>c,cj:()=>i,oc:()=>n});var i,n,s=r(6459),o=r(9746),a=r(2399);!function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(i||(i={})),function(e){e.compare=function(e,t){return t-e};const t=Object.create(null);t[e.Error]=(0,o.kg)("sev.error","Error"),t[e.Warning]=(0,o.kg)("sev.warning","Warning"),t[e.Info]=(0,o.kg)("sev.info","Info"),e.toString=function(e){return t[e]||""},e.fromSeverity=function(t){switch(t){case s.A.Error:return e.Error;case s.A.Warning:return e.Warning;case s.A.Info:return e.Info;case s.A.Ignore:return e.Hint}},e.toSeverity=function(t){switch(t){case e.Error:return s.A.Error;case e.Warning:return s.A.Warning;case e.Info:return s.A.Info;case e.Hint:return s.A.Ignore}}}(i||(i={})),function(e){const t="";function r(e,r){const n=[t];return e.source?n.push(e.source.replace("¦","\\¦")):n.push(t),e.code?"string"==typeof e.code?n.push(e.code.replace("¦","\\¦")):n.push(e.code.value.replace("¦","\\¦")):n.push(t),void 0!==e.severity&&null!==e.severity?n.push(i.toString(e.severity)):n.push(t),e.message&&r?n.push(e.message.replace("¦","\\¦")):n.push(t),void 0!==e.startLineNumber&&null!==e.startLineNumber?n.push(e.startLineNumber.toString()):n.push(t),void 0!==e.startColumn&&null!==e.startColumn?n.push(e.startColumn.toString()):n.push(t),void 0!==e.endLineNumber&&null!==e.endLineNumber?n.push(e.endLineNumber.toString()):n.push(t),void 0!==e.endColumn&&null!==e.endColumn?n.push(e.endColumn.toString()):n.push(t),n.push(t),n.join("¦")}e.makeKey=function(e){return r(e,!0)},e.makeKeyOptionalMessage=r}(n||(n={}));const c=(0,a.u1)("markerService")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,