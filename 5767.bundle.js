"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[5767],{8881:(e,n,i)=>{i.d(n,{L:()=>t});var o,t,r=i(5915);!function(e){e.isThemeColor=function(e){return e&&"object"==typeof e&&"string"==typeof e.id}}(o||(o={})),function(e){e.iconNameSegment="[A-Za-z0-9]+",e.iconNameExpression="[A-Za-z0-9-]+",e.iconModifierExpression="~[A-Za-z]+",e.iconNameCharacter="[A-Za-z0-9~-]";const n=new RegExp(`^(${e.iconNameExpression})(${e.iconModifierExpression})?$`);function i(e){const o=n.exec(e.id);if(!o)return i(r.W.error);const[,t,s]=o,c=["codicon","codicon-"+t];return s&&c.push("codicon-modifier-"+s.substring(1)),c}e.asClassNameArray=i,e.asClassName=function(e){return i(e).join(" ")},e.asCSSSelector=function(e){return"."+i(e).join(".")},e.isThemeIcon=function(e){return e&&"object"==typeof e&&"string"==typeof e.id&&(void 0===e.color||o.isThemeColor(e.color))};const t=new RegExp(`^\\$\\((${e.iconNameExpression}(?:${e.iconModifierExpression})?)\\)$`);e.fromString=function(e){const n=t.exec(e);if(!n)return;const[,i]=n;return{id:i}},e.fromId=function(e){return{id:e}},e.modify=function(e,n){let i=e.id;const o=i.lastIndexOf("~");return-1!==o&&(i=i.substring(0,o)),n&&(i=`${i}~${n}`),{id:i}},e.getModifier=function(e){const n=e.id.lastIndexOf("~");if(-1!==n)return e.id.substring(n+1)},e.isEqual=function(e,n){return e.id===n.id&&e.color?.id===n.color?.id}}(t||(t={}))},5767:(e,n,i)=>{i.r(n),i.d(n,{getIconClasses:()=>u});var o=i(3072),t=i(2467),r=i(7264),s=i(4957),c=i(9971),a=i(8881);const f=/(?:\/|^)(?:([^\/]+)\/)?([^\/]+)$/;function u(e,n,i,u,d){if(a.L.isThemeIcon(d))return[`codicon-${d.id}`,"predefined-file-icon"];if(r.r.isUri(d))return[];const p=u===c.p.ROOT_FOLDER?["rootfolder-icon"]:u===c.p.FOLDER?["folder-icon"]:["file-icon"];if(i){let r;if(i.scheme===o.ny.data)r=t.B6.parseMetaData(i).get(t.B6.META_DATA_LABEL);else{const e=i.path.match(f);e?(r=l(e[2].toLowerCase()),e[1]&&p.push(`${l(e[1].toLowerCase())}-name-dir-icon`)):r=l(i.authority.toLowerCase())}if(u===c.p.ROOT_FOLDER)p.push(`${r}-root-name-folder-icon`);else if(u===c.p.FOLDER)p.push(`${r}-name-folder-icon`);else{if(r){if(p.push(`${r}-name-file-icon`),p.push("name-file-icon"),r.length<=255){const e=r.split(".");for(let n=1;n<e.length;n++)p.push(`${e.slice(n).join(".")}-ext-file-icon`)}p.push("ext-file-icon")}const c=function(e,n,i){if(!i)return null;let r=null;if(i.scheme===o.ny.data){const e=t.B6.parseMetaData(i).get(t.B6.META_DATA_MIME);e&&(r=n.getLanguageIdByMimeType(e))}else{const n=e.getModel(i);n&&(r=n.getLanguageId())}return r&&r!==s.vH?r:n.guessLanguageIdByFilepathOrFirstLine(i)}(e,n,i);c&&p.push(`${l(c)}-lang-file-icon`)}}return p}function l(e){return e.replace(/[\s]/g,"/")}},9971:(e,n,i)=>{var o;i.d(n,{p:()=>o}),function(e){e[e.FILE=0]="FILE",e[e.FOLDER=1]="FOLDER",e[e.ROOT_FOLDER=2]="ROOT_FOLDER"}(o||(o={}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,