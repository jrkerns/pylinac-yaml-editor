"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[9044],{2399:(e,t,n)=>{var i;n.d(t,{_$:()=>i,_Y:()=>r,u1:()=>s}),function(e){e.serviceIds=new Map,e.DI_TARGET="$di$target",e.DI_DEPENDENCIES="$di$dependencies",e.getServiceDependencies=function(t){return t[e.DI_DEPENDENCIES]||[]}}(i||(i={}));const r=s("instantiationService");function s(e){if(i.serviceIds.has(e))return i.serviceIds.get(e);const t=function(e,n,r){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");!function(e,t,n){t[i.DI_TARGET]===t?t[i.DI_DEPENDENCIES].push({id:e,index:n}):(t[i.DI_DEPENDENCIES]=[{id:e,index:n}],t[i.DI_TARGET]=t)}(t,e,r)};return t.toString=()=>e,i.serviceIds.set(e,t),t}},7167:(e,t,n)=>{n.d(t,{O:()=>s});var i=n(7110),r=n(9359);const s=new class{constructor(){this.data=new Map}add(e,t){i.ok(r.Kg(e)),i.ok(r.Gv(t)),i.ok(!this.data.has(e),"There is already an extension with this id"),this.data.set(e,t)}as(e){return this.data.get(e)||null}}},9563:(e,t,n)=>{var i;function r(e){return e===i.HIGH_CONTRAST_DARK||e===i.HIGH_CONTRAST_LIGHT}function s(e){return e===i.DARK||e===i.HIGH_CONTRAST_DARK}n.d(t,{Bb:()=>r,HD:()=>s,zM:()=>i}),function(e){e.DARK="dark",e.LIGHT="light",e.HIGH_CONTRAST_DARK="hcDark",e.HIGH_CONTRAST_LIGHT="hcLight"}(i||(i={}))},9044:(e,t,n)=>{n.d(t,{Fd:()=>u,Gy:()=>c,Pz:()=>d,Yf:()=>o,lR:()=>m,zy:()=>g});var i=n(2106),r=n(998),s=n(2399),a=n(7167),h=n(9563);const c=(0,s.u1)("themeService");function o(e){return{id:e}}function d(e){switch(e){case h.zM.DARK:return"vs-dark";case h.zM.HIGH_CONTRAST_DARK:return"hc-black";case h.zM.HIGH_CONTRAST_LIGHT:return"hc-light";default:return"vs"}}const u={ThemingContribution:"base.contributions.theming"},T=new class{constructor(){this.themingParticipants=[],this.themingParticipants=[],this.onThemingParticipantAddedEmitter=new i.vl}onColorThemeChange(e){return this.themingParticipants.push(e),this.onThemingParticipantAddedEmitter.fire(e),(0,r.s)((()=>{const t=this.themingParticipants.indexOf(e);this.themingParticipants.splice(t,1)}))}getThemingParticipants(){return this.themingParticipants}};function g(e){return T.onColorThemeChange(e)}a.O.add(u.ThemingContribution,T);class m extends r.jG{constructor(e){super(),this.themeService=e,this.theme=e.getColorTheme(),this._register(this.themeService.onDidColorThemeChange((e=>this.onThemeChange(e))))}onThemeChange(e){this.theme=e,this.updateStyles()}updateStyles(){}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,