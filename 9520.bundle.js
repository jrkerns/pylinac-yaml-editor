"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[9520,2354],{3902:(t,e,n)=>{function s(t){let e=0,n=0,s=0,i=0;for(let r=0,o=t.length;r<o;r++){const a=t.charCodeAt(r);13===a?(0===e&&(n=r),e++,r+1<o&&10===t.charCodeAt(r+1)?(i|=2,r++):i|=3,s=r+1):10===a&&(i|=1,0===e&&(n=r),e++,s=r+1)}return 0===e&&(n=t.length),[e,n,t.length-s,i]}n.d(e,{W:()=>s})},5910:(t,e,n)=>{n.d(e,{x:()=>s});class s{static getLanguageId(t){return(255&t)>>>0}static getTokenType(t){return(768&t)>>>8}static containsBalancedBrackets(t){return!!(1024&t)}static getFontStyle(t){return(30720&t)>>>11}static getForeground(t){return(16744448&t)>>>15}static getBackground(t){return(4278190080&t)>>>24}static getClassNameFromMetadata(t){let e="mtk"+this.getForeground(t);const n=this.getFontStyle(t);return 1&n&&(e+=" mtki"),2&n&&(e+=" mtkb"),4&n&&(e+=" mtku"),8&n&&(e+=" mtks"),e}static getInlineStyleFromMetadata(t,e){const n=this.getForeground(t),s=this.getFontStyle(t);let i=`color: ${e[n]};`;1&s&&(i+="font-style: italic;"),2&s&&(i+="font-weight: bold;");let r="";return 4&s&&(r+=" underline"),8&s&&(r+=" line-through"),r&&(i+=`text-decoration:${r};`),i}static getPresentationFromMetadata(t){const e=this.getForeground(t),n=this.getFontStyle(t);return{foreground:e,italic:Boolean(1&n),bold:Boolean(2&n),underline:Boolean(4&n),strikethrough:Boolean(8&n)}}}},7922:(t,e,n)=>{n.d(e,{L:()=>s});const s=(0,n(2399).u1)("languageService")},9520:(t,e,n)=>{n.r(e),n.d(e,{SemanticTokensProviderStyling:()=>d,toMultilineTokens2:()=>g}),n(5910);var s=n(9044),i=n(6441),r=n(5365),o=n(8061),a=n(3902);class h{static create(t,e){return new h(t,new l(e))}get startLineNumber(){return this._startLineNumber}get endLineNumber(){return this._endLineNumber}constructor(t,e){this._startLineNumber=t,this._tokens=e,this._endLineNumber=this._startLineNumber+this._tokens.getMaxDeltaLine()}toString(){return this._tokens.toString(this._startLineNumber)}_updateEndLineNumber(){this._endLineNumber=this._startLineNumber+this._tokens.getMaxDeltaLine()}isEmpty(){return this._tokens.isEmpty()}getLineTokens(t){return this._startLineNumber<=t&&t<=this._endLineNumber?this._tokens.getLineTokens(t-this._startLineNumber):null}getRange(){const t=this._tokens.getRange();return t?new o.Q(this._startLineNumber+t.startLineNumber,t.startColumn,this._startLineNumber+t.endLineNumber,t.endColumn):t}removeTokens(t){const e=t.startLineNumber-this._startLineNumber,n=t.endLineNumber-this._startLineNumber;this._startLineNumber+=this._tokens.removeTokens(e,t.startColumn-1,n,t.endColumn-1),this._updateEndLineNumber()}split(t){const e=t.startLineNumber-this._startLineNumber,n=t.endLineNumber-this._startLineNumber,[s,i,r]=this._tokens.split(e,t.startColumn-1,n,t.endColumn-1);return[new h(this._startLineNumber,s),new h(this._startLineNumber+r,i)]}applyEdit(t,e){const[n,s,i]=(0,a.W)(e);this.acceptEdit(t,n,s,i,e.length>0?e.charCodeAt(0):0)}acceptEdit(t,e,n,s,i){this._acceptDeleteRange(t),this._acceptInsertText(new r.y(t.startLineNumber,t.startColumn),e,n,s,i),this._updateEndLineNumber()}_acceptDeleteRange(t){if(t.startLineNumber===t.endLineNumber&&t.startColumn===t.endColumn)return;const e=t.startLineNumber-this._startLineNumber,n=t.endLineNumber-this._startLineNumber;if(n<0){const t=n-e;return void(this._startLineNumber-=t)}const s=this._tokens.getMaxDeltaLine();if(!(e>=s+1)){if(e<0&&n>=s+1)return this._startLineNumber=0,void this._tokens.clear();if(e<0){const s=-e;this._startLineNumber-=s,this._tokens.acceptDeleteRange(t.startColumn-1,0,0,n,t.endColumn-1)}else this._tokens.acceptDeleteRange(0,e,t.startColumn-1,n,t.endColumn-1)}}_acceptInsertText(t,e,n,s,i){if(0===e&&0===n)return;const r=t.lineNumber-this._startLineNumber;r<0?this._startLineNumber+=e:r>=this._tokens.getMaxDeltaLine()+1||this._tokens.acceptInsertText(r,t.column-1,e,n,s,i)}}class l{constructor(t){this._tokens=t,this._tokenCount=t.length/4}toString(t){const e=[];for(let n=0;n<this._tokenCount;n++)e.push(`(${this._getDeltaLine(n)+t},${this._getStartCharacter(n)}-${this._getEndCharacter(n)})`);return`[${e.join(",")}]`}getMaxDeltaLine(){const t=this._getTokenCount();return 0===t?-1:this._getDeltaLine(t-1)}getRange(){const t=this._getTokenCount();if(0===t)return null;const e=this._getStartCharacter(0),n=this._getDeltaLine(t-1),s=this._getEndCharacter(t-1);return new o.Q(0,e+1,n,s+1)}_getTokenCount(){return this._tokenCount}_getDeltaLine(t){return this._tokens[4*t]}_getStartCharacter(t){return this._tokens[4*t+1]}_getEndCharacter(t){return this._tokens[4*t+2]}isEmpty(){return 0===this._getTokenCount()}getLineTokens(t){let e=0,n=this._getTokenCount()-1;for(;e<n;){const s=e+Math.floor((n-e)/2),i=this._getDeltaLine(s);if(i<t)e=s+1;else{if(!(i>t)){let i=s;for(;i>e&&this._getDeltaLine(i-1)===t;)i--;let r=s;for(;r<n&&this._getDeltaLine(r+1)===t;)r++;return new u(this._tokens.subarray(4*i,4*r+4))}n=s-1}}return this._getDeltaLine(e)===t?new u(this._tokens.subarray(4*e,4*e+4)):null}clear(){this._tokenCount=0}removeTokens(t,e,n,s){const i=this._tokens,r=this._tokenCount;let o=0,a=!1,h=0;for(let l=0;l<r;l++){const r=4*l,u=i[r],c=i[r+1],_=i[r+2],d=i[r+3];if((u>t||u===t&&_>=e)&&(u<n||u===n&&c<=s))a=!0;else{if(0===o&&(h=u),a){const t=4*o;i[t]=u-h,i[t+1]=c,i[t+2]=_,i[t+3]=d}o++}}return this._tokenCount=o,h}split(t,e,n,s){const i=this._tokens,r=this._tokenCount,o=[],a=[];let h=o,u=0,c=0;for(let o=0;o<r;o++){const r=4*o,l=i[r],_=i[r+1],d=i[r+2],g=i[r+3];if(l>t||l===t&&d>=e){if(l<n||l===n&&_<=s)continue;h!==a&&(h=a,u=0,c=l)}h[u++]=l-c,h[u++]=_,h[u++]=d,h[u++]=g}return[new l(new Uint32Array(o)),new l(new Uint32Array(a)),c]}acceptDeleteRange(t,e,n,s,i){const r=this._tokens,o=this._tokenCount,a=s-e;let h=0,l=!1;for(let u=0;u<o;u++){const c=4*u;let _=r[c],d=r[c+1],g=r[c+2];const m=r[c+3];if(_<e||_===e&&g<=n){h++;continue}if(_===e&&d<n)_===s&&g>i?g-=i-n:g=n;else if(_===e&&d===n){if(!(_===s&&g>i)){l=!0;continue}g-=i-n}else if(_<s||_===s&&d<i){if(!(_===s&&g>i)){l=!0;continue}_=e,d=n,g=d+(g-i)}else if(_>s){if(0===a&&!l){h=o;break}_-=a}else{if(!(_===s&&d>=i))throw new Error("Not possible!");t&&0===_&&(d+=t,g+=t),_-=a,d-=i-n,g-=i-n}const k=4*h;r[k]=_,r[k+1]=d,r[k+2]=g,r[k+3]=m,h++}this._tokenCount=h}acceptInsertText(t,e,n,s,i,r){const o=0===n&&1===s&&(r>=48&&r<=57||r>=65&&r<=90||r>=97&&r<=122),a=this._tokens,h=this._tokenCount;for(let r=0;r<h;r++){const h=4*r;let l=a[h],u=a[h+1],c=a[h+2];if(!(l<t||l===t&&c<e)){if(l===t&&c===e){if(!o)continue;c+=1}else if(l===t&&u<e&&e<c)0===n?c+=s:c=e;else{if(l===t&&u===e&&o)continue;if(l===t)if(l+=n,0===n)u+=s,c+=s;else{const t=c-u;u=i+(u-e),c=u+t}else l+=n}a[h]=l,a[h+1]=u,a[h+2]=c}}}}class u{constructor(t){this._tokens=t}getCount(){return this._tokens.length/4}getStartCharacter(t){return this._tokens[4*t+1]}getEndCharacter(t){return this._tokens[4*t+2]}getMetadata(t){return this._tokens[4*t+3]}}var c=n(7922),_=function(t,e){return function(n,s){e(n,s,t)}};let d=class{constructor(t,e,n,s){this._legend=t,this._themeService=e,this._languageService=n,this._logService=s,this._hasWarnedOverlappingTokens=!1,this._hasWarnedInvalidLengthTokens=!1,this._hasWarnedInvalidEditStart=!1,this._hashTable=new k}getMetadata(t,e,n){const s=this._languageService.languageIdCodec.encodeLanguageId(n),i=this._hashTable.get(t,e,s);let r;if(i)r=i.metadata;else{let i=this._legend.tokenTypes[t];const o=[];if(i){let t=e;for(let e=0;t>0&&e<this._legend.tokenModifiers.length;e++)1&t&&o.push(this._legend.tokenModifiers[e]),t>>=1;const s=this._themeService.getColorTheme().getTokenStyleMetadata(i,o,n);void 0===s?r=2147483647:(r=0,void 0!==s.italic&&(r|=1|(s.italic?1:0)<<11),void 0!==s.bold&&(r|=2|(s.bold?2:0)<<11),void 0!==s.underline&&(r|=4|(s.underline?4:0)<<11),void 0!==s.strikethrough&&(r|=8|(s.strikethrough?8:0)<<11),s.foreground&&(r|=16|s.foreground<<15),0===r&&(r=2147483647))}else r=2147483647,i="not-in-legend";this._hashTable.add(t,e,s,r)}return r}warnOverlappingSemanticTokens(t,e){this._hasWarnedOverlappingTokens||(this._hasWarnedOverlappingTokens=!0,this._logService.warn(`Overlapping semantic tokens detected at lineNumber ${t}, column ${e}`))}warnInvalidLengthSemanticTokens(t,e){this._hasWarnedInvalidLengthTokens||(this._hasWarnedInvalidLengthTokens=!0,this._logService.warn(`Semantic token with invalid length detected at lineNumber ${t}, column ${e}`))}warnInvalidEditStart(t,e,n,s,i){this._hasWarnedInvalidEditStart||(this._hasWarnedInvalidEditStart=!0,this._logService.warn(`Invalid semantic tokens edit detected (previousResultId: ${t}, resultId: ${e}) at edit #${n}: The provided start offset ${s} is outside the previous data (length ${i}).`))}};function g(t,e,n){const s=t.data,i=t.data.length/5|0,r=Math.max(Math.ceil(i/1024),400),o=[];let a=0,l=1,u=0;for(;a<i;){const t=a;let c=Math.min(t+r,i);if(c<i){let e=c;for(;e-1>t&&0===s[5*e];)e--;if(e-1===t){let t=c;for(;t+1<i&&0===s[5*t];)t++;c=t}else c=e}let _=new Uint32Array(4*(c-t)),d=0,g=0,m=0,k=0;for(;a<c;){const t=5*a,i=s[t],r=s[t+1],o=l+i|0,h=0===i?u+r|0:r,c=h+s[t+2]|0,f=s[t+3],L=s[t+4];if(c<=h)e.warnInvalidLengthSemanticTokens(o,h+1);else if(m===o&&k>h)e.warnOverlappingSemanticTokens(o,h+1);else{const t=e.getMetadata(f,L,n);2147483647!==t&&(0===g&&(g=o),_[d]=o-g,_[d+1]=h,_[d+2]=c,_[d+3]=t,d+=4,m=o,k=c)}l=o,u=h,a++}d!==_.length&&(_=_.subarray(0,d));const f=h.create(g,_);o.push(f)}return o}d=function(t,e,n,s){var i,r=arguments.length,o=r<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,n):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,n,s);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(o=(r<3?i(o):r>3?i(e,n,o):i(e,n))||o);return r>3&&o&&Object.defineProperty(e,n,o),o}([_(1,s.Gy),_(2,c.L),_(3,i.rr)],d);class m{constructor(t,e,n,s){this.tokenTypeIndex=t,this.tokenModifierSet=e,this.languageId=n,this.metadata=s,this.next=null}}class k{static{this._SIZES=[3,7,13,31,61,127,251,509,1021,2039,4093,8191,16381,32749,65521,131071,262139,524287,1048573,2097143]}constructor(){this._elementsCount=0,this._currentLengthIndex=0,this._currentLength=k._SIZES[this._currentLengthIndex],this._growCount=Math.round(this._currentLengthIndex+1<k._SIZES.length?2/3*this._currentLength:0),this._elements=[],k._nullOutEntries(this._elements,this._currentLength)}static _nullOutEntries(t,e){for(let n=0;n<e;n++)t[n]=null}_hash2(t,e){return(t<<5)-t+e|0}_hashFunc(t,e,n){return this._hash2(this._hash2(t,e),n)%this._currentLength}get(t,e,n){const s=this._hashFunc(t,e,n);let i=this._elements[s];for(;i;){if(i.tokenTypeIndex===t&&i.tokenModifierSet===e&&i.languageId===n)return i;i=i.next}return null}add(t,e,n,s){if(this._elementsCount++,0!==this._growCount&&this._elementsCount>=this._growCount){const t=this._elements;this._currentLengthIndex++,this._currentLength=k._SIZES[this._currentLengthIndex],this._growCount=Math.round(this._currentLengthIndex+1<k._SIZES.length?2/3*this._currentLength:0),this._elements=[],k._nullOutEntries(this._elements,this._currentLength);for(const e of t){let t=e;for(;t;){const e=t.next;t.next=null,this._add(t),t=e}}}this._add(new m(t,e,n,s))}_add(t){const e=this._hashFunc(t.tokenTypeIndex,t.tokenModifierSet,t.languageId);t.next=this._elements[e],this._elements[e]=t}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,