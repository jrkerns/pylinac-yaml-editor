"use strict";(self.webpackChunkpylinac_yaml_editor=self.webpackChunkpylinac_yaml_editor||[]).push([[3930,5996,6995],{8897:(e,t,n)=>{n.d(t,{KC:()=>o,S3:()=>a,dB:()=>h,nx:()=>i,r:()=>r});var s=n(3338);const i=(e,t)=>e===t;function a(e=i){return(t,n)=>s.aI(t,n,e)}function r(){return(e,t)=>e.equals(t)}function o(e,t,n){if(void 0!==n){return null==e||null==t?t===e:n(e,t)}{const t=e;return(e,n)=>null==e||null==n?n===e:t(e,n)}}function h(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!h(e[n],t[n]))return!1;return!0}if(e&&"object"==typeof e&&t&&"object"==typeof t&&Object.getPrototypeOf(e)===Object.prototype&&Object.getPrototypeOf(t)===Object.prototype){const n=e,s=t,i=Object.keys(n),a=Object.keys(s),r=new Set(a);if(i.length!==a.length)return!1;for(const e of i){if(!r.has(e))return!1;if(!h(n[e],s[e]))return!1}return!0}return!1}new WeakMap},6311:(e,t,n)=>{n.d(t,{BK:()=>p,fm:()=>u,Y:()=>g,zL:()=>d,yC:()=>c,ht:()=>l,lk:()=>m.lk,un:()=>i.un,nb:()=>i.nb,ZX:()=>m.ZX,C:()=>i.C,rm:()=>i.rm,X2:()=>s.X2,y0:()=>m.y0,Yd:()=>m.Yd,yQ:()=>m.yQ,FY:()=>s.FY,Zh:()=>C,OI:()=>m.OI,PO:()=>s.PO,Rn:()=>s.Rn,oJ:()=>_});var s=n(4442),i=n(8366),a=n(7110),r=n(998),o=n(9855),h=n(4950);function u(e){return new f(new o.nA(void 0,void 0,e),e,void 0,void 0)}function d(e,t){return new f(new o.nA(e.owner,e.debugName,e.debugReferenceFn??t),t,void 0,void 0)}function g(e,t){return new f(new o.nA(e.owner,e.debugName,e.debugReferenceFn??t),t,e.createEmptyChangeSummary,e.handleChange)}function l(e,t){const n=new r.Cm,s=g({owner:e.owner,debugName:e.debugName,debugReferenceFn:e.debugReferenceFn??t,createEmptyChangeSummary:e.createEmptyChangeSummary,handleChange:e.handleChange},((e,s)=>{n.clear(),t(e,s,n)}));return(0,r.s)((()=>{s.dispose(),n.dispose()}))}function c(e){const t=new r.Cm,n=d({owner:void 0,debugName:void 0,debugReferenceFn:e},(n=>{t.clear(),e(n,t)}));return(0,r.s)((()=>{n.dispose(),t.dispose()}))}class f{get debugName(){return this._debugNameData.getDebugName(this)??"(anonymous)"}constructor(e,t,n,s){this._debugNameData=e,this._runFn=t,this.createChangeSummary=n,this._handleChange=s,this.state=2,this.updateCount=0,this.disposed=!1,this.dependencies=new Set,this.dependenciesToBeRemoved=new Set,this.changeSummary=this.createChangeSummary?.(),(0,h.tZ)()?.handleAutorunCreated(this),this._runIfNeeded(),(0,r.Ay)(this)}dispose(){this.disposed=!0;for(const e of this.dependencies)e.removeObserver(this);this.dependencies.clear(),(0,r.VD)(this)}_runIfNeeded(){if(3===this.state)return;const e=this.dependenciesToBeRemoved;this.dependenciesToBeRemoved=this.dependencies,this.dependencies=e,this.state=3;const t=this.disposed;try{if(!t){(0,h.tZ)()?.handleAutorunTriggered(this);const e=this.changeSummary;this.changeSummary=this.createChangeSummary?.(),this._runFn(this,e)}}finally{t||(0,h.tZ)()?.handleAutorunFinished(this);for(const e of this.dependenciesToBeRemoved)e.removeObserver(this);this.dependenciesToBeRemoved.clear()}}toString(){return`Autorun<${this.debugName}>`}beginUpdate(){3===this.state&&(this.state=1),this.updateCount++}endUpdate(){if(1===this.updateCount)do{if(1===this.state){this.state=3;for(const e of this.dependencies)if(e.reportChanges(),2===this.state)break}this._runIfNeeded()}while(3!==this.state);this.updateCount--,(0,a.Ft)((()=>this.updateCount>=0))}handlePossibleChange(e){3===this.state&&this.dependencies.has(e)&&!this.dependenciesToBeRemoved.has(e)&&(this.state=1)}handleChange(e,t){this.dependencies.has(e)&&!this.dependenciesToBeRemoved.has(e)&&(!this._handleChange||this._handleChange({changedObservable:e,change:t,didChange:t=>t===e},this.changeSummary))&&(this.state=2)}readObservable(e){if(this.disposed)return e.get();e.addObserver(this);const t=e.get();return this.dependencies.add(e),this.dependenciesToBeRemoved.delete(e),t}}!function(e){e.Observer=f}(u||(u={}));var m=n(2146),v=n(4327);class p{static fromFn(e){return new p(e())}constructor(e){this._value=(0,s.FY)(this,void 0),this.promiseResult=this._value,this.promise=e.then((e=>((0,s.Rn)((t=>{this._value.set(new b(e,void 0),t)})),e)),(e=>{throw(0,s.Rn)((t=>{this._value.set(new b(void 0,e),t)})),e}))}}class b{constructor(e,t){this.data=e,this.error=t}}function _(e,t,n,s){return t||(t=e=>null!=e),new Promise(((i,a)=>{let r=!0,o=!1;const h=e.map((e=>({isFinished:t(e),error:!!n&&n(e),state:e}))),d=u((e=>{const{isFinished:t,error:n,state:s}=h.read(e);(t||n)&&(r?o=!0:d.dispose(),n?a(!0===n?s:n):i(s))}));if(s){const e=s.onCancellationRequested((()=>{d.dispose(),e.dispose(),a(new v.AL)}));if(s.isCancellationRequested)return d.dispose(),e.dispose(),void a(new v.AL)}r=!1,o&&d.dispose()}))}var w=n(8897);class y extends s.ZK{get debugName(){return this._debugNameData.getDebugName(this)??"LazyObservableValue"}constructor(e,t,n){super(),this._debugNameData=e,this._equalityComparator=n,this._isUpToDate=!0,this._deltas=[],this._updateCounter=0,this._value=t}get(){return this._update(),this._value}_update(){if(!this._isUpToDate)if(this._isUpToDate=!0,this._deltas.length>0){for(const e of this.observers)for(const t of this._deltas)e.handleChange(this,t);this._deltas.length=0}else for(const e of this.observers)e.handleChange(this,void 0)}_beginUpdate(){if(this._updateCounter++,1===this._updateCounter)for(const e of this.observers)e.beginUpdate(this)}_endUpdate(){if(this._updateCounter--,0===this._updateCounter){this._update();const e=[...this.observers];for(const t of e)t.endUpdate(this)}}addObserver(e){const t=!this.observers.has(e)&&this._updateCounter>0;super.addObserver(e),t&&e.beginUpdate(this)}removeObserver(e){const t=this.observers.has(e)&&this._updateCounter>0;super.removeObserver(e),t&&e.endUpdate(this)}set(e,t,n){if(void 0===n&&this._equalityComparator(this._value,e))return;let i;t||(t=i=new s.XL((()=>{}),(()=>`Setting ${this.debugName}`)));try{if(this._isUpToDate=!1,this._setValue(e),void 0!==n&&this._deltas.push(n),t.updateObserver({beginUpdate:()=>this._beginUpdate(),endUpdate:()=>this._endUpdate(),handleChange:(e,t)=>{},handlePossibleChange:e=>{}},this),this._updateCounter>1)for(const e of this.observers)e.handlePossibleChange(this)}finally{i&&i.finish()}}toString(){return`${this.debugName}: ${this._value}`}_setValue(e){this._value=e}}function C(e,t){return e.lazy?new y(new o.nA(e.owner,e.debugName,void 0),t,e.equalsFn??w.nx):new s.Lj(new o.nA(e.owner,e.debugName,void 0),t,e.equalsFn??w.nx)}},4442:(e,t,n)=>{n.d(t,{Bm:()=>u,FB:()=>d,FY:()=>w,Lj:()=>y,N2:()=>g,PO:()=>b,Rn:()=>f,X2:()=>C,XL:()=>_,YY:()=>v,ZK:()=>c,fL:()=>p,zV:()=>l});var s=n(8897),i=n(9855),a=n(4950);let r,o,h;function u(e){r=e}function d(e){o=e}function g(e){h=e}class l{get TChange(){return null}reportChanges(){this.get()}read(e){return e?e.readObservable(this):this.get()}map(e,t){const n=void 0===t?void 0:e,s=void 0===t?e:t;return h({owner:n,debugName:()=>{const e=(0,i.qQ)(s);if(void 0!==e)return e;const t=/^\s*\(?\s*([a-zA-Z_$][a-zA-Z_$0-9]*)\s*\)?\s*=>\s*\1(?:\??)\.([a-zA-Z_$][a-zA-Z_$0-9]*)\s*$/.exec(s.toString());return t?`${this.debugName}.${t[2]}`:n?void 0:`${this.debugName} (mapped)`},debugReferenceFn:s},(e=>s(this.read(e),e)))}flatten(){return h({owner:void 0,debugName:()=>`${this.debugName} (flattened)`},(e=>this.read(e).read(e)))}recomputeInitiallyAndOnChange(e,t){return e.add(r(this,t)),this}keepObserved(e){return e.add(o(this)),this}}class c extends l{constructor(){super(...arguments),this.observers=new Set}addObserver(e){const t=this.observers.size;this.observers.add(e),0===t&&this.onFirstObserverAdded()}removeObserver(e){this.observers.delete(e)&&0===this.observers.size&&this.onLastObserverRemoved()}onFirstObserverAdded(){}onLastObserverRemoved(){}}function f(e,t){const n=new _(e,t);try{e(n)}finally{n.finish()}}let m=3524==n.j?void 0:null;function v(e){if(m)e(m);else{const t=new _(e,void 0);m=t;try{e(t)}finally{t.finish(),m=void 0}}}async function p(e,t){const n=new _(e,t);try{await e(n)}finally{n.finish()}}function b(e,t,n){e?t(e):f(t,n)}class _{constructor(e,t){this._fn=e,this._getDebugName=t,this.updatingObservers=[],(0,a.tZ)()?.handleBeginTransaction(this)}getDebugName(){return this._getDebugName?this._getDebugName():(0,i.qQ)(this._fn)}updateObserver(e,t){this.updatingObservers.push({observer:e,observable:t}),e.beginUpdate(t)}finish(){const e=this.updatingObservers;for(let t=0;t<e.length;t++){const{observer:n,observable:s}=e[t];n.endUpdate(s)}this.updatingObservers=null,(0,a.tZ)()?.handleEndTransaction()}}function w(e,t){let n;return n="string"==typeof e?new i.nA(void 0,e,void 0):new i.nA(e,void 0,void 0),new y(n,t,s.nx)}class y extends c{get debugName(){return this._debugNameData.getDebugName(this)??"ObservableValue"}constructor(e,t,n){super(),this._debugNameData=e,this._equalityComparator=n,this._value=t}get(){return this._value}set(e,t,n){if(void 0===n&&this._equalityComparator(this._value,e))return;let s;t||(t=s=new _((()=>{}),(()=>`Setting ${this.debugName}`)));try{const s=this._value;this._setValue(e),(0,a.tZ)()?.handleObservableChanged(this,{oldValue:s,newValue:e,change:n,didChange:!0,hadValue:!0});for(const e of this.observers)t.updateObserver(e,this),e.handleChange(this,n)}finally{s&&s.finish()}}toString(){return`${this.debugName}: ${this._value}`}_setValue(e){this._value=e}}function C(e,t){let n;return n="string"==typeof e?new i.nA(void 0,e,void 0):new i.nA(e,void 0,void 0),new O(n,t,s.nx)}class O extends(3524==n.j?y:null){_setValue(e){this._value!==e&&(this._value&&this._value.dispose(),this._value=e)}dispose(){this._value?.dispose()}}},9855:(e,t,n)=>{n.d(t,{nA:()=>s,qQ:()=>h});class s{constructor(e,t,n){this.owner=e,this.debugNameSource=t,this.referenceFn=n}getDebugName(e){return function(e,t){const n=a.get(e);if(n)return n;const s=function(e,t){const n=a.get(e);if(n)return n;const s=t.owner?function(e){const t=o.get(e);if(t)return t;const n=function(e){const t=e.constructor;return t?t.name:"Object"}(e);let s=r.get(n)??0;s++,r.set(n,s);const i=1===s?n:`${n}#${s}`;return o.set(e,i),i}(t.owner)+".":"";let i;const u=t.debugNameSource;if(void 0!==u){if("function"!=typeof u)return s+u;if(i=u(),void 0!==i)return s+i}const d=t.referenceFn;if(void 0!==d&&(i=h(d),void 0!==i))return s+i;if(void 0!==t.owner){const n=function(e,t){for(const n in e)if(e[n]===t)return n}(t.owner,e);if(void 0!==n)return s+n}}(e,t);if(s){let t=i.get(s)??0;t++,i.set(s,t);const n=1===t?s:`${s}#${t}`;return a.set(e,n),n}}(e,this)}}const i=new Map,a=new WeakMap,r=new Map,o=new WeakMap;function h(e){const t=e.toString(),n=/\/\*\*\s*@description\s*([^*]*)\*\//.exec(t),s=n?n[1]:void 0;return s?.trim()}},8366:(e,t,n)=>{n.d(t,{C:()=>g,a0:()=>f,dQ:()=>d,nb:()=>l,rm:()=>c,un:()=>u});var s=n(7110),i=n(8897),a=n(998),r=n(4442),o=n(9855),h=n(4950);function u(e,t){return void 0!==t?new m(new o.nA(e,void 0,t),t,void 0,void 0,void 0,i.nx):new m(new o.nA(void 0,void 0,e),e,void 0,void 0,void 0,i.nx)}function d(e,t,n){return new v(new o.nA(e,void 0,t),t,void 0,void 0,void 0,i.nx,n)}function g(e,t){return new m(new o.nA(e.owner,e.debugName,e.debugReferenceFn),t,void 0,void 0,e.onLastObserverRemoved,e.equalsFn??i.nx)}function l(e,t){return new m(new o.nA(e.owner,e.debugName,void 0),t,e.createEmptyChangeSummary,e.handleChange,void 0,e.equalityComparer??i.nx)}function c(e,t){let n,s;void 0===t?(n=e,s=void 0):(s=e,n=t);const r=new a.Cm;return new m(new o.nA(s,void 0,n),(e=>(r.clear(),n(e,r))),void 0,void 0,(()=>r.dispose()),i.nx)}function f(e,t){let n,s,r;return void 0===t?(n=e,s=void 0):(s=e,n=t),new m(new o.nA(s,void 0,n),(e=>{r?r.clear():r=new a.Cm;const t=n(e);return t&&r.add(t),t}),void 0,void 0,(()=>{r&&(r.dispose(),r=void 0)}),i.nx)}(0,r.N2)(g);class m extends r.ZK{get debugName(){return this._debugNameData.getDebugName(this)??"(anonymous)"}constructor(e,t,n,s,i=void 0,a){super(),this._debugNameData=e,this._computeFn=t,this.createChangeSummary=n,this._handleChange=s,this._handleLastObserverRemoved=i,this._equalityComparator=a,this.state=0,this.value=void 0,this.updateCount=0,this.dependencies=new Set,this.dependenciesToBeRemoved=new Set,this.changeSummary=void 0,this.changeSummary=this.createChangeSummary?.(),(0,h.tZ)()?.handleDerivedCreated(this)}onLastObserverRemoved(){this.state=0,this.value=void 0;for(const e of this.dependencies)e.removeObserver(this);this.dependencies.clear(),this._handleLastObserverRemoved?.()}get(){if(0===this.observers.size){const e=this._computeFn(this,this.createChangeSummary?.());return this.onLastObserverRemoved(),e}do{if(1===this.state)for(const e of this.dependencies)if(e.reportChanges(),2===this.state)break;1===this.state&&(this.state=3),this._recomputeIfNeeded()}while(3!==this.state);return this.value}_recomputeIfNeeded(){if(3===this.state)return;const e=this.dependenciesToBeRemoved;this.dependenciesToBeRemoved=this.dependencies,this.dependencies=e;const t=0!==this.state,n=this.value;this.state=3;const s=this.changeSummary;this.changeSummary=this.createChangeSummary?.();try{this.value=this._computeFn(this,s)}finally{for(const e of this.dependenciesToBeRemoved)e.removeObserver(this);this.dependenciesToBeRemoved.clear()}const i=t&&!this._equalityComparator(n,this.value);if((0,h.tZ)()?.handleDerivedRecomputed(this,{oldValue:n,newValue:this.value,change:void 0,didChange:i,hadValue:t}),i)for(const e of this.observers)e.handleChange(this,void 0)}toString(){return`LazyDerived<${this.debugName}>`}beginUpdate(e){this.updateCount++;const t=1===this.updateCount;if(3===this.state&&(this.state=1,!t))for(const e of this.observers)e.handlePossibleChange(this);if(t)for(const e of this.observers)e.beginUpdate(this)}endUpdate(e){if(this.updateCount--,0===this.updateCount){const e=[...this.observers];for(const t of e)t.endUpdate(this)}(0,s.Ft)((()=>this.updateCount>=0))}handlePossibleChange(e){if(3===this.state&&this.dependencies.has(e)&&!this.dependenciesToBeRemoved.has(e)){this.state=1;for(const e of this.observers)e.handlePossibleChange(this)}}handleChange(e,t){if(this.dependencies.has(e)&&!this.dependenciesToBeRemoved.has(e)){const n=!this._handleChange||this._handleChange({changedObservable:e,change:t,didChange:t=>t===e},this.changeSummary),s=3===this.state;if(n&&(1===this.state||s)&&(this.state=2,s))for(const e of this.observers)e.handlePossibleChange(this)}}readObservable(e){e.addObserver(this);const t=e.get();return this.dependencies.add(e),this.dependenciesToBeRemoved.delete(e),t}addObserver(e){const t=!this.observers.has(e)&&this.updateCount>0;super.addObserver(e),t&&e.beginUpdate(this)}removeObserver(e){const t=this.observers.has(e)&&this.updateCount>0;super.removeObserver(e),t&&e.endUpdate(this)}}class v extends m{constructor(e,t,n,s,i=void 0,a,r){super(e,t,n,s,i,a),this.set=r}}},4950:(e,t,n)=>{let s;function i(e){s=e}function a(){return s}n.d(t,{Br:()=>i,jm:()=>r,tZ:()=>a});class r{constructor(){this.indentation=0,this.changedObservablesSets=new WeakMap}textToConsoleArgs(e){return function(e){const t=new Array,n=[];let s="";!function e(i){if("length"in i)for(const t of i)t&&e(t);else"text"in i?(s+=`%c${i.text}`,t.push(i.style),i.data&&n.push(...i.data)):"data"in i&&n.push(...i.data)}(e);const i=[s,...t];return i.push(...n),i}([o(g("|  ",this.indentation)),e])}formatInfo(e){return e.hadValue?e.didChange?[o(" "),u(d(e.oldValue,70),{color:"red",strikeThrough:!0}),o(" "),u(d(e.newValue,60),{color:"green"})]:[o(" (unchanged)")]:[o(" "),u(d(e.newValue,60),{color:"green"}),o(" (initial)")]}handleObservableChanged(e,t){console.log(...this.textToConsoleArgs([h("observable value changed"),u(e.debugName,{color:"BlueViolet"}),...this.formatInfo(t)]))}formatChanges(e){if(0!==e.size)return u(" (changed deps: "+[...e].map((e=>e.debugName)).join(", ")+")",{color:"gray"})}handleDerivedCreated(e){const t=e.handleChange;this.changedObservablesSets.set(e,new Set),e.handleChange=(n,s)=>(this.changedObservablesSets.get(e).add(n),t.apply(e,[n,s]))}handleDerivedRecomputed(e,t){const n=this.changedObservablesSets.get(e);console.log(...this.textToConsoleArgs([h("derived recomputed"),u(e.debugName,{color:"BlueViolet"}),...this.formatInfo(t),this.formatChanges(n),{data:[{fn:e._debugNameData.referenceFn??e._computeFn}]}])),n.clear()}handleFromEventObservableTriggered(e,t){console.log(...this.textToConsoleArgs([h("observable from event triggered"),u(e.debugName,{color:"BlueViolet"}),...this.formatInfo(t),{data:[{fn:e._getValue}]}]))}handleAutorunCreated(e){const t=e.handleChange;this.changedObservablesSets.set(e,new Set),e.handleChange=(n,s)=>(this.changedObservablesSets.get(e).add(n),t.apply(e,[n,s]))}handleAutorunTriggered(e){const t=this.changedObservablesSets.get(e);console.log(...this.textToConsoleArgs([h("autorun"),u(e.debugName,{color:"BlueViolet"}),this.formatChanges(t),{data:[{fn:e._debugNameData.referenceFn??e._runFn}]}])),t.clear(),this.indentation++}handleAutorunFinished(e){this.indentation--}handleBeginTransaction(e){let t=e.getDebugName();void 0===t&&(t=""),console.log(...this.textToConsoleArgs([h("transaction"),u(t,{color:"BlueViolet"}),{data:[{fn:e._fn}]}])),this.indentation++}handleEndTransaction(){this.indentation--}}function o(e){return u(e,{color:"black"})}function h(e){return u(function(e){for(;e.length<10;)e+=" ";return e}(`${e}: `),{color:"black",bold:!0})}function u(e,t={color:"black"}){const n={color:t.color};return t.strikeThrough&&(n["text-decoration"]="line-through"),t.bold&&(n["font-weight"]="bold"),{text:e,style:(s=n,Object.entries(s).reduce(((e,[t,n])=>`${e}${t}:${n};`),""))};var s}function d(e,t){switch(typeof e){case"number":default:return""+e;case"string":return e.length+2<=t?`"${e}"`:`"${e.substr(0,t-7)}"+...`;case"boolean":return e?"true":"false";case"undefined":return"undefined";case"object":return null===e?"null":Array.isArray(e)?function(e,t){let n="[ ",s=!0;for(const i of e){if(s||(n+=", "),n.length-5>t){n+="...";break}s=!1,n+=`${d(i,t-n.length)}`}return n+=" ]",n}(e,t):function(e,t){let n="{ ",s=!0;for(const[i,a]of Object.entries(e)){if(s||(n+=", "),n.length-5>t){n+="...";break}s=!1,n+=`${i}: ${d(a,t-n.length)}`}return n+=" }",n}(e,t);case"symbol":return e.toString();case"function":return`[[Function${e.name?" "+e.name:""}]]`}}function g(e,t){let n="";for(let s=1;s<=t;s++)n+=e;return n}},2146:(e,t,n)=>{n.d(t,{OI:()=>b,Rl:()=>y,Yd:()=>v,ZX:()=>w,eP:()=>l,lk:()=>u,t:()=>O,y0:()=>g,yQ:()=>f}),n(2106);var s=n(998),i=n(4442),a=n(9855),r=n(8366),o=n(4950),h=n(8897);function u(e){return new d(e)}class d extends i.zV{constructor(e){super(),this.value=e}get debugName(){return this.toString()}get(){return this.value}addObserver(e){}removeObserver(e){}toString(){return`Const: ${this.value}`}}function g(...e){let t,n,s;return 3===e.length?[t,n,s]=e:[n,s]=e,new c(new a.nA(t,void 0,s),n,s,(()=>c.globalTransaction),h.nx)}function l(e,t,n){return new c(new a.nA(e.owner,e.debugName,e.debugReferenceFn??n),t,n,(()=>c.globalTransaction),e.equalsFn??h.nx)}class c extends i.ZK{constructor(e,t,n,s,a){super(),this._debugNameData=e,this.event=t,this._getValue=n,this._getTransaction=s,this._equalityComparator=a,this.hasValue=!1,this.handleEvent=e=>{const t=this._getValue(e),n=this.value,s=!this.hasValue||!this._equalityComparator(n,t);let a=!1;s&&(this.value=t,this.hasValue&&(a=!0,(0,i.PO)(this._getTransaction(),(e=>{(0,o.tZ)()?.handleFromEventObservableTriggered(this,{oldValue:n,newValue:t,change:void 0,didChange:s,hadValue:this.hasValue});for(const t of this.observers)e.updateObserver(t,this),t.handleChange(this,void 0)}),(()=>{const e=this.getDebugName();return"Event fired"+(e?`: ${e}`:"")}))),this.hasValue=!0),a||(0,o.tZ)()?.handleFromEventObservableTriggered(this,{oldValue:n,newValue:t,change:void 0,didChange:s,hadValue:this.hasValue})}}getDebugName(){return this._debugNameData.getDebugName(this)}get debugName(){const e=this.getDebugName();return"From Event"+(e?`: ${e}`:"")}onFirstObserverAdded(){this.subscription=this.event(this.handleEvent)}onLastObserverRemoved(){this.subscription.dispose(),this.subscription=void 0,this.hasValue=!1,this.value=void 0}get(){return this.subscription?(this.hasValue||this.handleEvent(void 0),this.value):this._getValue(void 0)}}function f(e,t){return new m(e,t)}!function(e){e.Observer=c,e.batchEventsGlobally=function(e,t){let n=!1;void 0===c.globalTransaction&&(c.globalTransaction=e,n=!0);try{t()}finally{n&&(c.globalTransaction=void 0)}}}(g||(g={}));class m extends i.ZK{constructor(e,t){super(),this.debugName=e,this.event=t,this.handleEvent=()=>{(0,i.Rn)((e=>{for(const t of this.observers)e.updateObserver(t,this),t.handleChange(this,void 0)}),(()=>this.debugName))}}onFirstObserverAdded(){this.subscription=this.event(this.handleEvent)}onLastObserverRemoved(){this.subscription.dispose(),this.subscription=void 0}get(){}}function v(e){return"string"==typeof e?new p(e):new p(void 0,e)}class p extends i.ZK{get debugName(){return new a.nA(this._owner,this._debugName,void 0).getDebugName(this)??"Observable Signal"}toString(){return this.debugName}constructor(e,t){super(),this._debugName=e,this._owner=t}trigger(e,t){if(e)for(const n of this.observers)e.updateObserver(n,this),n.handleChange(this,t);else(0,i.Rn)((e=>{this.trigger(e,t)}),(()=>`Trigger signal ${this.debugName}`))}get(){}}function b(e,t){const n=new _(!0,t);return e.addObserver(n),t?t(e.get()):e.reportChanges(),(0,s.s)((()=>{e.removeObserver(n)}))}(0,i.FB)((function(e){const t=new _(!1,void 0);return e.addObserver(t),(0,s.s)((()=>{e.removeObserver(t)}))})),(0,i.Bm)(b);class _{constructor(e,t){this._forceRecompute=e,this._handleValue=t,this._counter=0}beginUpdate(e){this._counter++}endUpdate(e){this._counter--,0===this._counter&&this._forceRecompute&&(this._handleValue?this._handleValue(e.get()):e.reportChanges())}handlePossibleChange(e){}handleChange(e,t){}}function w(e,t){let n;return(0,r.C)({owner:e,debugReferenceFn:t},(e=>(n=t(e,n),n)))}function y(e,t,n,s){let i=new C(n,s);return(0,r.C)({debugReferenceFn:n,owner:e,onLastObserverRemoved:()=>{i.dispose(),i=new C(n)}},(e=>(i.setItems(t.read(e)),i.getItems())))}class C{constructor(e,t){this._map=e,this._keySelector=t,this._cache=new Map,this._items=[]}dispose(){this._cache.forEach((e=>e.store.dispose())),this._cache.clear()}setItems(e){const t=[],n=new Set(this._cache.keys());for(const i of e){const e=this._keySelector?this._keySelector(i):i;let a=this._cache.get(e);if(a)n.delete(e);else{const t=new s.Cm;a={out:this._map(i,t),store:t},this._cache.set(e,a)}t.push(a.out)}for(const e of n)this._cache.get(e).store.dispose(),this._cache.delete(e);this._items=t}getItems(){return this._items}}function O(e,t){return w(e,((e,n)=>n??t(e)))}},3930:(e,t,n)=>{n.r(t),n.d(t,{LanguageService:()=>d});var s=n(2106),i=n(998),a=n(6995),r=n(3338),o=n(4364),h=n(4957),u=n(6311);class d extends i.jG{static{this.instanceCount=0}constructor(e=!1){super(),this._onDidRequestBasicLanguageFeatures=this._register(new s.vl),this.onDidRequestBasicLanguageFeatures=this._onDidRequestBasicLanguageFeatures.event,this._onDidRequestRichLanguageFeatures=this._register(new s.vl),this.onDidRequestRichLanguageFeatures=this._onDidRequestRichLanguageFeatures.event,this._onDidChange=this._register(new s.vl({leakWarningThreshold:200})),this.onDidChange=this._onDidChange.event,this._requestedBasicLanguages=new Set,this._requestedRichLanguages=new Set,d.instanceCount++,this._registry=this._register(new a.LanguagesRegistry(!0,e)),this.languageIdCodec=this._registry.languageIdCodec,this._register(this._registry.onDidChange((()=>this._onDidChange.fire())))}dispose(){d.instanceCount--,super.dispose()}isRegisteredLanguageId(e){return this._registry.isRegisteredLanguageId(e)}getLanguageIdByLanguageName(e){return this._registry.getLanguageIdByLanguageName(e)}getLanguageIdByMimeType(e){return this._registry.getLanguageIdByMimeType(e)}guessLanguageIdByFilepathOrFirstLine(e,t){const n=this._registry.guessLanguageIdByFilepathOrFirstLine(e,t);return(0,r.Fy)(n,null)}createById(e){return new g(this.onDidChange,(()=>this._createAndGetLanguageIdentifier(e)))}createByFilepathOrFirstLine(e,t){return new g(this.onDidChange,(()=>{const n=this.guessLanguageIdByFilepathOrFirstLine(e,t);return this._createAndGetLanguageIdentifier(n)}))}_createAndGetLanguageIdentifier(e){return e&&this.isRegisteredLanguageId(e)||(e=h.vH),e}requestBasicLanguageFeatures(e){this._requestedBasicLanguages.has(e)||(this._requestedBasicLanguages.add(e),this._onDidRequestBasicLanguageFeatures.fire(e))}requestRichLanguageFeatures(e){this._requestedRichLanguages.has(e)||(this._requestedRichLanguages.add(e),this.requestBasicLanguageFeatures(e),o.dG.getOrCreate(e),this._onDidRequestRichLanguageFeatures.fire(e))}}class g{constructor(e,t){this._value=(0,u.y0)(this,e,(()=>t())),this.onDidChange=s.Jh.fromObservable(this._value)}get languageId(){return this._value.get()}}},5996:(e,t,n)=>{n.r(t),n.d(t,{clearPlatformLanguageAssociations:()=>f,getLanguageIds:()=>m,registerPlatformLanguageAssociation:()=>c});var s=n(3958),i=n(3720),a=n(3072),r=n(8019),o=n(2467),h=n(6844),u=n(4957);let d=[],g=[],l=[];function c(e,t=!1){!function(e,t,n){const i=function(e){return{id:e.id,mime:e.mime,filename:e.filename,extension:e.extension,filepattern:e.filepattern,firstline:e.firstline,userConfigured:false,filenameLowercase:e.filename?e.filename.toLowerCase():void 0,extensionLowercase:e.extension?e.extension.toLowerCase():void 0,filepatternLowercase:e.filepattern?(0,s.qg)(e.filepattern.toLowerCase()):void 0,filepatternOnPath:!!e.filepattern&&e.filepattern.indexOf(r.SA.sep)>=0}}(e);d.push(i),i.userConfigured?l.push(i):g.push(i),n&&!i.userConfigured&&d.forEach((e=>{e.mime===i.mime||e.userConfigured||(i.extension&&e.extension===i.extension&&console.warn(`Overwriting extension <<${i.extension}>> to now point to mime <<${i.mime}>>`),i.filename&&e.filename===i.filename&&console.warn(`Overwriting filename <<${i.filename}>> to now point to mime <<${i.mime}>>`),i.filepattern&&e.filepattern===i.filepattern&&console.warn(`Overwriting filepattern <<${i.filepattern}>> to now point to mime <<${i.mime}>>`),i.firstline&&e.firstline===i.firstline&&console.warn(`Overwriting firstline <<${i.firstline}>> to now point to mime <<${i.mime}>>`))}))}(e,0,t)}function f(){d=d.filter((e=>e.userConfigured)),g=[]}function m(e,t){return function(e,t){let n;if(e)switch(e.scheme){case a.ny.file:n=e.fsPath;break;case a.ny.data:n=o.B6.parseMetaData(e).get(o.B6.META_DATA_LABEL);break;case a.ny.vscodeNotebookCell:n=void 0;break;default:n=e.path}if(!n)return[{id:"unknown",mime:i.K.unknown}];n=n.toLowerCase();const s=(0,r.P8)(n),c=v(n,s,l);if(c)return[c,{id:u.vH,mime:i.K.text}];const f=v(n,s,g);if(f)return[f,{id:u.vH,mime:i.K.text}];if(t){const e=function(e){if((0,h.LU)(e)&&(e=e.substr(1)),e.length>0)for(let t=d.length-1;t>=0;t--){const n=d[t];if(!n.firstline)continue;const s=e.match(n.firstline);if(s&&s.length>0)return n}}(t);if(e)return[e,{id:u.vH,mime:i.K.text}]}return[{id:"unknown",mime:i.K.unknown}]}(e,t).map((e=>e.id))}function v(e,t,n){let s,i,a;for(let r=n.length-1;r>=0;r--){const o=n[r];if(t===o.filenameLowercase){s=o;break}if(o.filepattern&&(!i||o.filepattern.length>i.filepattern.length)){const n=o.filepatternOnPath?e:t;o.filepatternLowercase?.(n)&&(i=o)}o.extension&&(!a||o.extension.length>a.extension.length)&&t.endsWith(o.extensionLowercase)&&(a=o)}return s||i||a||void 0}},6995:(e,t,n)=>{n.r(t),n.d(t,{LanguageIdCodec:()=>l,LanguagesRegistry:()=>c});var s=n(2106),i=n(998),a=n(6844),r=n(5996),o=n(4957),h=n(7142),u=n(7167);const d=Object.prototype.hasOwnProperty,g="vs.editor.nullLanguage";class l{constructor(){this._languageIdToLanguage=[],this._languageToLanguageId=new Map,this._register(g,0),this._register(o.vH,1),this._nextLanguageId=2}_register(e,t){this._languageIdToLanguage[t]=e,this._languageToLanguageId.set(e,t)}register(e){if(this._languageToLanguageId.has(e))return;const t=this._nextLanguageId++;this._register(e,t)}encodeLanguageId(e){return this._languageToLanguageId.get(e)||0}decodeLanguageId(e){return this._languageIdToLanguage[e]||g}}class c extends i.jG{static{this.instanceCount=0}constructor(e=!0,t=!1){super(),this._onDidChange=this._register(new s.vl),this.onDidChange=this._onDidChange.event,c.instanceCount++,this._warnOnOverwrite=t,this.languageIdCodec=new l,this._dynamicLanguages=[],this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},e&&(this._initializeFromRegistry(),this._register(o.W6.onDidChangeLanguages((e=>{this._initializeFromRegistry()}))))}dispose(){c.instanceCount--,super.dispose()}_initializeFromRegistry(){this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},(0,r.clearPlatformLanguageAssociations)();const e=[].concat(o.W6.getLanguages()).concat(this._dynamicLanguages);this._registerLanguages(e)}_registerLanguages(e){for(const t of e)this._registerLanguage(t);this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},Object.keys(this._languages).forEach((e=>{const t=this._languages[e];t.name&&(this._nameMap[t.name]=t.identifier),t.aliases.forEach((e=>{this._lowercaseNameMap[e.toLowerCase()]=t.identifier})),t.mimetypes.forEach((e=>{this._mimeTypesMap[e]=t.identifier}))})),u.O.as(h.Fd.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds()),this._onDidChange.fire()}_registerLanguage(e){const t=e.id;let n;d.call(this._languages,t)?n=this._languages[t]:(this.languageIdCodec.register(t),n={identifier:t,name:null,mimetypes:[],aliases:[],extensions:[],filenames:[],configurationFiles:[],icons:[]},this._languages[t]=n),this._mergeLanguage(n,e)}_mergeLanguage(e,t){const n=t.id;let s=null;if(Array.isArray(t.mimetypes)&&t.mimetypes.length>0&&(e.mimetypes.push(...t.mimetypes),s=t.mimetypes[0]),s||(s=`text/x-${n}`,e.mimetypes.push(s)),Array.isArray(t.extensions)){t.configuration?e.extensions=t.extensions.concat(e.extensions):e.extensions=e.extensions.concat(t.extensions);for(const e of t.extensions)(0,r.registerPlatformLanguageAssociation)({id:n,mime:s,extension:e},this._warnOnOverwrite)}if(Array.isArray(t.filenames))for(const i of t.filenames)(0,r.registerPlatformLanguageAssociation)({id:n,mime:s,filename:i},this._warnOnOverwrite),e.filenames.push(i);if(Array.isArray(t.filenamePatterns))for(const e of t.filenamePatterns)(0,r.registerPlatformLanguageAssociation)({id:n,mime:s,filepattern:e},this._warnOnOverwrite);if("string"==typeof t.firstLine&&t.firstLine.length>0){let e=t.firstLine;"^"!==e.charAt(0)&&(e="^"+e);try{const t=new RegExp(e);(0,a.eY)(t)||(0,r.registerPlatformLanguageAssociation)({id:n,mime:s,firstline:t},this._warnOnOverwrite)}catch(n){console.warn(`[${t.id}]: Invalid regular expression \`${e}\`: `,n)}}e.aliases.push(n);let i=null;if(void 0!==t.aliases&&Array.isArray(t.aliases)&&(i=0===t.aliases.length?[null]:t.aliases),null!==i)for(const t of i)t&&0!==t.length&&e.aliases.push(t);const o=null!==i&&i.length>0;if(o&&null===i[0]);else{const t=(o?i[0]:null)||n;!o&&e.name||(e.name=t)}t.configuration&&e.configurationFiles.push(t.configuration),t.icon&&e.icons.push(t.icon)}isRegisteredLanguageId(e){return!!e&&d.call(this._languages,e)}getRegisteredLanguageIds(){return Object.keys(this._languages)}getLanguageIdByLanguageName(e){const t=e.toLowerCase();return d.call(this._lowercaseNameMap,t)?this._lowercaseNameMap[t]:null}getLanguageIdByMimeType(e){return e&&d.call(this._mimeTypesMap,e)?this._mimeTypesMap[e]:null}guessLanguageIdByFilepathOrFirstLine(e,t){return e||t?(0,r.getLanguageIds)(e,t):[]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,